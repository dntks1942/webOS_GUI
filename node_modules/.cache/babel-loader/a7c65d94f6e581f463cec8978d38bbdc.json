{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"useSkins\", {\n  enumerable: true,\n  get: function get() {\n    return _useSkins[\"default\"];\n  }\n});\nexports.Skinnable = exports[\"default\"] = void 0;\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _hoc = _interopRequireDefault(require(\"@enact/core/hoc\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _useSkins = _interopRequireDefault(require(\"./useSkins\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Default config for `Skinnable`.\n *\n * @memberof ui/Skinnable.Skinnable\n * @hocconfig\n * @public\n */\n\n\nvar defaultConfig = {\n  /**\n   * The prop in which to pass the skinVariants value to the wrapped component. The recommended\n   * value is \"skinVariants\".\n   *\n   * If left unset, the skinVariant will not be passed to the wrapped component.\n   *\n   * @type {String}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  variantsProp: null,\n\n  /**\n   * The prop in which to pass the effective skin to the wrapped component.\n   *\n   * If left unset, the current skin will not be passed to the wrapped component.\n   *\n   * @type {String}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  prop: null,\n\n  /**\n   * A hash mapping the available skin names to their CSS class name.\n   *\n   * The keys are accepted as the only valid values for the `skin` prop on the wrapped component.\n   *\n   * @type {Object}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  skins: null,\n\n  /**\n   * Assign a default skin from the `skins` list.\n   *\n   * This will be used if the instantiator of the wrapped component provides no value to the\n   * `skin` prop.\n   *\n   * @type {String}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  defaultSkin: null,\n\n  /**\n   * Initial collection of applied variants\n   *\n   * This will be used if the instantiator of the wrapped component provides no value to the\n   * `skinVariants` prop.\n   *\n   * @type {String|String[]}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  defaultVariants: null,\n\n  /**\n   * A complete list of all supported variants.\n   *\n   * These will translate to CSS class names so should not conflict with any skin names.\n   * CamelCase is recommended for the values.\n   *\n   * @type {String[]}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  allowedVariants: null\n};\n/**\n * A higher-order component that assigns skinning classes for the purposes of styling children components.\n *\n * Use the config options to specify the skins your theme has. Set this up in your theme's decorator\n * component to establish your supported skins.\n *\n * Note: This HoC passes `className` to the wrapped component. It must be passed to the main DOM\n * node. Additionally, it can be configured to pass the skin and skin variant as props.\n *\n * Example:\n * ```\n * const MyApp = ({skinName, ...rest) => (<div {...props}>{skinName}</div>);\n * ...\n * App = Skinnable({\n * \tprop: 'skinName',\n * \tskins: {\n * \t\tdark: 'moonstone',\n * \t\tlight: 'moonstone-light'\n * \t},\n * \tdefaultTheme: 'dark'\n * \tdefaultVariants: ['highContrast'],\n * \tallowedVariants: ['highContrast', 'largeText', 'grayscale']\n * }, MyApp);\n * ```\n *\n * @class Skinnable\n * @memberof ui/Skinnable\n * @hoc\n * @public\n */\n\nvar Skinnable = (0, _hoc[\"default\"])(defaultConfig, function (config, Wrapped) {\n  var prop = config.prop,\n      skins = config.skins,\n      defaultSkin = config.defaultSkin,\n      variants = config.allowedVariants,\n      variantsProp = config.variantsProp;\n  var defaultVariants = (0, _util.objectify)(config.defaultVariants); // eslint-disable-next-line no-shadow\n\n  function Skinnable(_ref) {\n    var className = _ref.className,\n        skin = _ref.skin,\n        skinVariants = _ref.skinVariants,\n        rest = _objectWithoutProperties(_ref, [\"className\", \"skin\", \"skinVariants\"]);\n\n    var hook = (0, _useSkins[\"default\"])({\n      defaultSkin: defaultSkin,\n      defaultVariants: defaultVariants,\n      skin: skin,\n      skins: skins,\n      skinVariants: skinVariants,\n      variants: variants\n    });\n    var allClassNames = (0, _classnames[\"default\"])(hook.className, className);\n\n    if (allClassNames) {\n      rest.className = allClassNames;\n    }\n\n    if (prop) {\n      rest[prop] = hook.skin;\n    }\n\n    if (variantsProp) {\n      rest[variantsProp] = hook.variants;\n    }\n\n    return hook.provideSkins( /*#__PURE__*/_react[\"default\"].createElement(Wrapped, rest));\n  }\n\n  Skinnable.propTypes =\n  /** @lends ui/Skinnable.Skinnable.prototype */\n  {\n    /**\n     * The name of the skin a component should use to render itself. Available skins are\n     * defined in the \"defaultConfig\" for this HOC.\n     *\n     * @type {String}\n     * @public\n     */\n    skin: _propTypes[\"default\"].string,\n\n    /**\n     * The variant(s) on a skin that a component should use when rendering. These will\n     * typically alter the appearance of a skin's existing definition in a way that does not\n     * override that skin's general styling.\n     *\n     * Multiple data types are supported by this prop, which afford different conveniences\n     * and abilities. String and Array are effectively the same, supporting just additions\n     * to the variants being applied to a component, and are much more convenient. Objects\n     * may also be used, and have the ability to disable variants being passed by their\n     * ancestors. Objects take the format of a basic hash, with variants as key names and\n     * true/false Booleans as values, depicting their state. If a variant is excluded from\n     * any version of data type used to set this prop, that variant will ignored, falling\n     * back to the defaultVariant or parent variant, in that order.\n     *\n     * skinVariants examples:\n     * ```\n     *  // String\n     *  skinVariants=\"highContrast\"\n     *\n     *  // Array\n     *  skinVariants={['highContrast']}\n     *\n     *  // Object\n     *  skinVariants={{\n     *  \thighContrast: true,\n     *  \tgrayscale: false\n     *  }}\n     * ```\n     *\n     * @type {String|String[]|Object}\n     * @public\n     */\n    skinVariants: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].array, _propTypes[\"default\"].object])\n  };\n  return Skinnable;\n});\nexports.Skinnable = Skinnable;\nvar _default = Skinnable;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/sonjaeseong/workspace/webOS/CARROT/webOS_GUI/node_modules/@enact/ui/Skinnable/Skinnable.js"],"names":["Object","defineProperty","exports","value","enumerable","get","_useSkins","Skinnable","_classnames","_interopRequireDefault","require","_hoc","_propTypes","_react","_util","obj","__esModule","_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","key","i","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","keys","defaultConfig","variantsProp","prop","skins","defaultSkin","defaultVariants","allowedVariants","config","Wrapped","variants","objectify","_ref","className","skin","skinVariants","rest","hook","allClassNames","provideSkins","createElement","propTypes","string","oneOfType","array","object","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,UAA/B,EAA2C;AACzCE,EAAAA,UAAU,EAAE,IAD6B;AAEzCC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,SAAS,CAAC,SAAD,CAAhB;AACD;AAJwC,CAA3C;AAMAJ,OAAO,CAACK,SAAR,GAAoBL,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA9C;;AAEA,IAAIM,WAAW,GAAGC,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAxC;;AAEA,IAAIC,IAAI,GAAGF,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAAjC;;AAEA,IAAIE,UAAU,GAAGH,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAvC;;AAEA,IAAIG,MAAM,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEA,IAAIJ,SAAS,GAAGG,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,IAAII,KAAK,GAAGJ,OAAO,CAAC,QAAD,CAAnB;;AAEA,SAASD,sBAAT,CAAgCM,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,SAASE,wBAAT,CAAkCC,MAAlC,EAA0CC,QAA1C,EAAoD;AAAE,MAAID,MAAM,IAAI,IAAd,EAAoB,OAAO,EAAP;;AAAW,MAAIE,MAAM,GAAGC,6BAA6B,CAACH,MAAD,EAASC,QAAT,CAA1C;;AAA8D,MAAIG,GAAJ,EAASC,CAAT;;AAAY,MAAIvB,MAAM,CAACwB,qBAAX,EAAkC;AAAE,QAAIC,gBAAgB,GAAGzB,MAAM,CAACwB,qBAAP,CAA6BN,MAA7B,CAAvB;;AAA6D,SAAKK,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGE,gBAAgB,CAACC,MAAjC,EAAyCH,CAAC,EAA1C,EAA8C;AAAED,MAAAA,GAAG,GAAGG,gBAAgB,CAACF,CAAD,CAAtB;AAA2B,UAAIJ,QAAQ,CAACQ,OAAT,CAAiBL,GAAjB,KAAyB,CAA7B,EAAgC;AAAU,UAAI,CAACtB,MAAM,CAAC4B,SAAP,CAAiBC,oBAAjB,CAAsCC,IAAtC,CAA2CZ,MAA3C,EAAmDI,GAAnD,CAAL,EAA8D;AAAUF,MAAAA,MAAM,CAACE,GAAD,CAAN,GAAcJ,MAAM,CAACI,GAAD,CAApB;AAA4B;AAAE;;AAAC,SAAOF,MAAP;AAAgB;;AAE5e,SAASC,6BAAT,CAAuCH,MAAvC,EAA+CC,QAA/C,EAAyD;AAAE,MAAID,MAAM,IAAI,IAAd,EAAoB,OAAO,EAAP;AAAW,MAAIE,MAAM,GAAG,EAAb;AAAiB,MAAIW,UAAU,GAAG/B,MAAM,CAACgC,IAAP,CAAYd,MAAZ,CAAjB;AAAsC,MAAII,GAAJ,EAASC,CAAT;;AAAY,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGQ,UAAU,CAACL,MAA3B,EAAmCH,CAAC,EAApC,EAAwC;AAAED,IAAAA,GAAG,GAAGS,UAAU,CAACR,CAAD,CAAhB;AAAqB,QAAIJ,QAAQ,CAACQ,OAAT,CAAiBL,GAAjB,KAAyB,CAA7B,EAAgC;AAAUF,IAAAA,MAAM,CAACE,GAAD,CAAN,GAAcJ,MAAM,CAACI,GAAD,CAApB;AAA4B;;AAAC,SAAOF,MAAP;AAAgB;AAEnT;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIa,aAAa,GAAG;AAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,YAAY,EAAE,IAVI;;AAYlB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAI,EAAE,IApBY;;AAsBlB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,EAAE,IA9BW;;AAgClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,EAAE,IAzCK;;AA2ClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAE,IApDC;;AAsDlB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAE;AA/DC,CAApB;AAiEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIhC,SAAS,GAAG,CAAC,GAAGI,IAAI,CAAC,SAAD,CAAR,EAAqBsB,aAArB,EAAoC,UAAUO,MAAV,EAAkBC,OAAlB,EAA2B;AAC7E,MAAIN,IAAI,GAAGK,MAAM,CAACL,IAAlB;AAAA,MACIC,KAAK,GAAGI,MAAM,CAACJ,KADnB;AAAA,MAEIC,WAAW,GAAGG,MAAM,CAACH,WAFzB;AAAA,MAGIK,QAAQ,GAAGF,MAAM,CAACD,eAHtB;AAAA,MAIIL,YAAY,GAAGM,MAAM,CAACN,YAJ1B;AAKA,MAAII,eAAe,GAAG,CAAC,GAAGxB,KAAK,CAAC6B,SAAV,EAAqBH,MAAM,CAACF,eAA5B,CAAtB,CAN6E,CAMT;;AAEpE,WAAS/B,SAAT,CAAmBqC,IAAnB,EAAyB;AACvB,QAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;AAAA,QACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAAA,QAEIC,YAAY,GAAGH,IAAI,CAACG,YAFxB;AAAA,QAGIC,IAAI,GAAG/B,wBAAwB,CAAC2B,IAAD,EAAO,CAAC,WAAD,EAAc,MAAd,EAAsB,cAAtB,CAAP,CAHnC;;AAKA,QAAIK,IAAI,GAAG,CAAC,GAAG3C,SAAS,CAAC,SAAD,CAAb,EAA0B;AACnC+B,MAAAA,WAAW,EAAEA,WADsB;AAEnCC,MAAAA,eAAe,EAAEA,eAFkB;AAGnCQ,MAAAA,IAAI,EAAEA,IAH6B;AAInCV,MAAAA,KAAK,EAAEA,KAJ4B;AAKnCW,MAAAA,YAAY,EAAEA,YALqB;AAMnCL,MAAAA,QAAQ,EAAEA;AANyB,KAA1B,CAAX;AAQA,QAAIQ,aAAa,GAAG,CAAC,GAAG1C,WAAW,CAAC,SAAD,CAAf,EAA4ByC,IAAI,CAACJ,SAAjC,EAA4CA,SAA5C,CAApB;;AAEA,QAAIK,aAAJ,EAAmB;AACjBF,MAAAA,IAAI,CAACH,SAAL,GAAiBK,aAAjB;AACD;;AAED,QAAIf,IAAJ,EAAU;AACRa,MAAAA,IAAI,CAACb,IAAD,CAAJ,GAAac,IAAI,CAACH,IAAlB;AACD;;AAED,QAAIZ,YAAJ,EAAkB;AAChBc,MAAAA,IAAI,CAACd,YAAD,CAAJ,GAAqBe,IAAI,CAACP,QAA1B;AACD;;AAED,WAAOO,IAAI,CAACE,YAAL,EAAmB,aAAatC,MAAM,CAAC,SAAD,CAAN,CAAkBuC,aAAlB,CAAgCX,OAAhC,EAAyCO,IAAzC,CAAhC,CAAP;AACD;;AAEDzC,EAAAA,SAAS,CAAC8C,SAAV;AACA;AACA;AACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIP,IAAAA,IAAI,EAAElC,UAAU,CAAC,SAAD,CAAV,CAAsB0C,MAR9B;;AAUE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIP,IAAAA,YAAY,EAAEnC,UAAU,CAAC,SAAD,CAAV,CAAsB2C,SAAtB,CAAgC,CAAC3C,UAAU,CAAC,SAAD,CAAV,CAAsB0C,MAAvB,EAA+B1C,UAAU,CAAC,SAAD,CAAV,CAAsB4C,KAArD,EAA4D5C,UAAU,CAAC,SAAD,CAAV,CAAsB6C,MAAlF,CAAhC;AA1ChB,GAFA;AA8CA,SAAOlD,SAAP;AACD,CAtFe,CAAhB;AAuFAL,OAAO,CAACK,SAAR,GAAoBA,SAApB;AACA,IAAImD,QAAQ,GAAGnD,SAAf;AACAL,OAAO,CAAC,SAAD,CAAP,GAAqBwD,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"useSkins\", {\n  enumerable: true,\n  get: function get() {\n    return _useSkins[\"default\"];\n  }\n});\nexports.Skinnable = exports[\"default\"] = void 0;\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _hoc = _interopRequireDefault(require(\"@enact/core/hoc\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _useSkins = _interopRequireDefault(require(\"./useSkins\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/**\n * Default config for `Skinnable`.\n *\n * @memberof ui/Skinnable.Skinnable\n * @hocconfig\n * @public\n */\nvar defaultConfig = {\n  /**\n   * The prop in which to pass the skinVariants value to the wrapped component. The recommended\n   * value is \"skinVariants\".\n   *\n   * If left unset, the skinVariant will not be passed to the wrapped component.\n   *\n   * @type {String}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  variantsProp: null,\n\n  /**\n   * The prop in which to pass the effective skin to the wrapped component.\n   *\n   * If left unset, the current skin will not be passed to the wrapped component.\n   *\n   * @type {String}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  prop: null,\n\n  /**\n   * A hash mapping the available skin names to their CSS class name.\n   *\n   * The keys are accepted as the only valid values for the `skin` prop on the wrapped component.\n   *\n   * @type {Object}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  skins: null,\n\n  /**\n   * Assign a default skin from the `skins` list.\n   *\n   * This will be used if the instantiator of the wrapped component provides no value to the\n   * `skin` prop.\n   *\n   * @type {String}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  defaultSkin: null,\n\n  /**\n   * Initial collection of applied variants\n   *\n   * This will be used if the instantiator of the wrapped component provides no value to the\n   * `skinVariants` prop.\n   *\n   * @type {String|String[]}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  defaultVariants: null,\n\n  /**\n   * A complete list of all supported variants.\n   *\n   * These will translate to CSS class names so should not conflict with any skin names.\n   * CamelCase is recommended for the values.\n   *\n   * @type {String[]}\n   * @memberof ui/Skinnable.Skinnable.defaultConfig\n   */\n  allowedVariants: null\n};\n/**\n * A higher-order component that assigns skinning classes for the purposes of styling children components.\n *\n * Use the config options to specify the skins your theme has. Set this up in your theme's decorator\n * component to establish your supported skins.\n *\n * Note: This HoC passes `className` to the wrapped component. It must be passed to the main DOM\n * node. Additionally, it can be configured to pass the skin and skin variant as props.\n *\n * Example:\n * ```\n * const MyApp = ({skinName, ...rest) => (<div {...props}>{skinName}</div>);\n * ...\n * App = Skinnable({\n * \tprop: 'skinName',\n * \tskins: {\n * \t\tdark: 'moonstone',\n * \t\tlight: 'moonstone-light'\n * \t},\n * \tdefaultTheme: 'dark'\n * \tdefaultVariants: ['highContrast'],\n * \tallowedVariants: ['highContrast', 'largeText', 'grayscale']\n * }, MyApp);\n * ```\n *\n * @class Skinnable\n * @memberof ui/Skinnable\n * @hoc\n * @public\n */\n\nvar Skinnable = (0, _hoc[\"default\"])(defaultConfig, function (config, Wrapped) {\n  var prop = config.prop,\n      skins = config.skins,\n      defaultSkin = config.defaultSkin,\n      variants = config.allowedVariants,\n      variantsProp = config.variantsProp;\n  var defaultVariants = (0, _util.objectify)(config.defaultVariants); // eslint-disable-next-line no-shadow\n\n  function Skinnable(_ref) {\n    var className = _ref.className,\n        skin = _ref.skin,\n        skinVariants = _ref.skinVariants,\n        rest = _objectWithoutProperties(_ref, [\"className\", \"skin\", \"skinVariants\"]);\n\n    var hook = (0, _useSkins[\"default\"])({\n      defaultSkin: defaultSkin,\n      defaultVariants: defaultVariants,\n      skin: skin,\n      skins: skins,\n      skinVariants: skinVariants,\n      variants: variants\n    });\n    var allClassNames = (0, _classnames[\"default\"])(hook.className, className);\n\n    if (allClassNames) {\n      rest.className = allClassNames;\n    }\n\n    if (prop) {\n      rest[prop] = hook.skin;\n    }\n\n    if (variantsProp) {\n      rest[variantsProp] = hook.variants;\n    }\n\n    return hook.provideSkins( /*#__PURE__*/_react[\"default\"].createElement(Wrapped, rest));\n  }\n\n  Skinnable.propTypes =\n  /** @lends ui/Skinnable.Skinnable.prototype */\n  {\n    /**\n     * The name of the skin a component should use to render itself. Available skins are\n     * defined in the \"defaultConfig\" for this HOC.\n     *\n     * @type {String}\n     * @public\n     */\n    skin: _propTypes[\"default\"].string,\n\n    /**\n     * The variant(s) on a skin that a component should use when rendering. These will\n     * typically alter the appearance of a skin's existing definition in a way that does not\n     * override that skin's general styling.\n     *\n     * Multiple data types are supported by this prop, which afford different conveniences\n     * and abilities. String and Array are effectively the same, supporting just additions\n     * to the variants being applied to a component, and are much more convenient. Objects\n     * may also be used, and have the ability to disable variants being passed by their\n     * ancestors. Objects take the format of a basic hash, with variants as key names and\n     * true/false Booleans as values, depicting their state. If a variant is excluded from\n     * any version of data type used to set this prop, that variant will ignored, falling\n     * back to the defaultVariant or parent variant, in that order.\n     *\n     * skinVariants examples:\n     * ```\n     *  // String\n     *  skinVariants=\"highContrast\"\n     *\n     *  // Array\n     *  skinVariants={['highContrast']}\n     *\n     *  // Object\n     *  skinVariants={{\n     *  \thighContrast: true,\n     *  \tgrayscale: false\n     *  }}\n     * ```\n     *\n     * @type {String|String[]|Object}\n     * @public\n     */\n    skinVariants: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].array, _propTypes[\"default\"].object])\n  };\n  return Skinnable;\n});\nexports.Skinnable = Skinnable;\nvar _default = Skinnable;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}