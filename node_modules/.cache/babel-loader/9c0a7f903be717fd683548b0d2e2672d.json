{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deprecate = exports[\"default\"] = void 0;\n/**\n * Provides the `deprecate` method\n *\n * @module core/internal/deprecate\n * @private\n */\n// Utility method to format deprecate message\n\nvar formatMsg = function formatMsg(_ref) {\n  var message = _ref.message,\n      name = _ref.name,\n      until = _ref.until,\n      replacedBy = _ref.replacedBy,\n      since = _ref.since;\n  var msg = 'DEPRECATED:';\n\n  if (name) {\n    msg += \" \".concat(name);\n  }\n\n  if (since) {\n    msg += \" since \".concat(since);\n  }\n\n  if (until) {\n    if (name || since) {\n      msg += '.';\n    }\n\n    msg += \" Will be removed in \".concat(until);\n  }\n\n  if (replacedBy) {\n    if (name || since || until) {\n      msg += '.';\n    }\n\n    msg += \" Replaced by \".concat(replacedBy);\n  }\n\n  if (name || since || until || replacedBy) {\n    msg += '.';\n  }\n\n  if (message) {\n    msg += \" \".concat(message, \".\");\n  }\n\n  return msg;\n}; // Utility method for console warning\n\n\nvar warn = function warn(msg) {\n  if (typeof console !== 'undefined') {\n    console.warn(msg); // eslint-disable-line no-console\n  }\n};\n/**\n * Marks a function, component or property (via `propTypes`) as deprecated. Deprecated items will\n * log a message on first invocation. Can also be used 'stand-alone' to issue a deprecation warning.\n * In stand-alone mode it currently will log every time.  In production mode, the deprecation\n * warning disappears.\n *\n * @function\n * @param {*} thing - The thing to be wrapped, or the deprecation config in stand-alone\n * @param {Object?} config - The deprecation config\n * @param {String?} config.name - An optional name for the deprecated item\n * @param {String?} config.message - An optional message to display\n * @param {String?} config.since - The version where deprecation started (optional)\n * @param {String?} config.until - The version where the functionality will be removed (optional)\n * @param {String?} config.replacedBy - An optional alternative\n * @param {Boolean?} config.alwaysWarn - If `true`, a warning will be issued for every access\n * @returns {*} Either a wrapped version of `thing` or an unwrapped version of `thing` in\n *\tproduction or stand-alone mode\n * @memberof core/internal/deprecate\n * @private\n */\n\n\nvar deprecate = function deprecate(thing, config) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!config) {\n      // If no config, config only invocation, just log message\n      var msg = formatMsg(thing);\n      warn(msg);\n      return thing;\n    } else {\n      var displayed, _msg;\n\n      return function () {\n        if (!displayed || config.alwaysWarn) {\n          if (!_msg) {\n            _msg = formatMsg(config);\n          }\n\n          warn(_msg);\n          displayed = true;\n        }\n\n        return thing.apply(void 0, arguments);\n      };\n    }\n  } else {\n    return thing;\n  }\n};\n\nexports.deprecate = deprecate;\nvar _default = deprecate;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/sonjaeseong/workspace/webOS/CARROT/webOS_GUI/node_modules/@enact/core/internal/deprecate/deprecate.js"],"names":["Object","defineProperty","exports","value","deprecate","formatMsg","_ref","message","name","until","replacedBy","since","msg","concat","warn","console","thing","config","process","env","NODE_ENV","displayed","_msg","alwaysWarn","apply","arguments","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deprecate = exports[\"default\"] = void 0;\n\n/**\n * Provides the `deprecate` method\n *\n * @module core/internal/deprecate\n * @private\n */\n// Utility method to format deprecate message\nvar formatMsg = function formatMsg(_ref) {\n  var message = _ref.message,\n      name = _ref.name,\n      until = _ref.until,\n      replacedBy = _ref.replacedBy,\n      since = _ref.since;\n  var msg = 'DEPRECATED:';\n\n  if (name) {\n    msg += \" \".concat(name);\n  }\n\n  if (since) {\n    msg += \" since \".concat(since);\n  }\n\n  if (until) {\n    if (name || since) {\n      msg += '.';\n    }\n\n    msg += \" Will be removed in \".concat(until);\n  }\n\n  if (replacedBy) {\n    if (name || since || until) {\n      msg += '.';\n    }\n\n    msg += \" Replaced by \".concat(replacedBy);\n  }\n\n  if (name || since || until || replacedBy) {\n    msg += '.';\n  }\n\n  if (message) {\n    msg += \" \".concat(message, \".\");\n  }\n\n  return msg;\n}; // Utility method for console warning\n\n\nvar warn = function warn(msg) {\n  if (typeof console !== 'undefined') {\n    console.warn(msg); // eslint-disable-line no-console\n  }\n};\n/**\n * Marks a function, component or property (via `propTypes`) as deprecated. Deprecated items will\n * log a message on first invocation. Can also be used 'stand-alone' to issue a deprecation warning.\n * In stand-alone mode it currently will log every time.  In production mode, the deprecation\n * warning disappears.\n *\n * @function\n * @param {*} thing - The thing to be wrapped, or the deprecation config in stand-alone\n * @param {Object?} config - The deprecation config\n * @param {String?} config.name - An optional name for the deprecated item\n * @param {String?} config.message - An optional message to display\n * @param {String?} config.since - The version where deprecation started (optional)\n * @param {String?} config.until - The version where the functionality will be removed (optional)\n * @param {String?} config.replacedBy - An optional alternative\n * @param {Boolean?} config.alwaysWarn - If `true`, a warning will be issued for every access\n * @returns {*} Either a wrapped version of `thing` or an unwrapped version of `thing` in\n *\tproduction or stand-alone mode\n * @memberof core/internal/deprecate\n * @private\n */\n\n\nvar deprecate = function deprecate(thing, config) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!config) {\n      // If no config, config only invocation, just log message\n      var msg = formatMsg(thing);\n      warn(msg);\n      return thing;\n    } else {\n      var displayed, _msg;\n\n      return function () {\n        if (!displayed || config.alwaysWarn) {\n          if (!_msg) {\n            _msg = formatMsg(config);\n          }\n\n          warn(_msg);\n          displayed = true;\n        }\n\n        return thing.apply(void 0, arguments);\n      };\n    }\n  } else {\n    return thing;\n  }\n};\n\nexports.deprecate = deprecate;\nvar _default = deprecate;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}