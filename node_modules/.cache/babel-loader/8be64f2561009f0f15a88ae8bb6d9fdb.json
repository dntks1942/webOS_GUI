{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resetDefaultConfig = exports.mergeConfig = exports.getConfig = exports.configure = exports[\"default\"] = void 0;\n\nvar _Drag = require(\"./Drag.js\");\n\nvar _Flick = require(\"./Flick.js\");\n\nvar _Hold = require(\"./Hold.js\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar allowedDragKeys = Object.keys(_Drag.defaultDragConfig);\nvar allowedFlickKeys = Object.keys(_Flick.defaultFlickConfig);\nvar allowedHoldKeys = Object.keys(_Hold.defaultHoldConfig);\n/**\n * The Global Gesture Configuration Object\n *\n * @private\n * @memberof ui/Touchable\n */\n\nvar config = {}; // map-friendly clone method\n\nvar clone = function clone(o) {\n  return Object.assign({}, o);\n}; // Merges two configuation objects while retaining only the allowed keys\n\n\nvar mergeGestureConfig = function mergeGestureConfig(current, update, allowed) {\n  var cfg = _objectSpread(_objectSpread({}, current), update);\n\n  Object.keys(cfg).forEach(function (key) {\n    if (allowed.indexOf(key) === -1) {\n      delete cfg[key];\n    }\n  });\n  return cfg;\n}; // Merges the current global config with the provided `cfg` and returns the result\n\n\nvar mergeConfig = function mergeConfig(cfg) {\n  var merged = {\n    drag: mergeGestureConfig(config.drag, cfg.drag, allowedDragKeys),\n    flick: mergeGestureConfig(config.flick, cfg.flick, allowedFlickKeys),\n    hold: mergeGestureConfig(config.hold, cfg.hold, allowedHoldKeys)\n  };\n  merged.hold.events = merged.hold.events.map(clone);\n  return merged;\n};\n/**\n * Configures the global gesture configuration for the application.\n *\n * Example:\n * ```\n * // Updates the `maxMoves`, `moveTolerance`, and `frequency` configurations while retaining the\n * // current value of all other configurations\n * configure({\n *     flick: {\n *         maxMoves: 10\n *     },\n *     hold: {\n *         moveTolerance: 32,\n *         frequency: 400\n *     }\n * });\n * ```\n *\n * Each type of gesture has its own set of configuration properties grouped within a separate object\n * keyed by the name of the gesture. Partial configurations may be passed and will be merged with\n * the current configuration.\n *\n * `drag`\n *\n *   * `boxSizing` - The part of the component's box model is used as the bounds of the constraint.\n *     Only applies when `global` is `false`.\n *     * `'border-box'` - the default, includes the padding and border but excludes the margin.\n *     * `'content-box'` - excludes the padding, border, and margin.\n *   * `global` - When `true`, drag gestures will continue when leaving the bounds of the component\n *      or blurring the component.\n *   * `moveTolerance` - The number of pixels from the start position of the drag that the pointer\n *     may move before cancelling the drag. Defaults to `16`.\n *\n * `flick`\n *\n *   * `maxDuration` - The amount of time, in milliseconds, to complete a flick gesture before it\n *     is cancelled. Defaults to 250.\n *   * `maxMoves` - The number of moves tracked to determine if a flick occurred. Defaults to `5`.\n *   * `minVelocity` - The minimum threshold, measured as the change in pixels over the change in\n *     time per move, that must be exceeded to generate a `onFlick` event.\n *\n * `hold`\n *\n *   * `cancelOnMove` - When `true`, the hold is cancelled when moving beyond the `moveTolerance`.\n *     Defaults to `false`\n *   * `global` - When `true`, hold gestures will continue when leaving the bounds of the component\n *      or blurring the component.\n *   * `moveTolerance` - The number of pixels from the start position of the hold that the pointer\n *     may move before cancelling the hold. Ignored when `cancelOnMove` is `false`. Defaults to\n *     `16`.\n *   * `frequency` - The time, in milliseconds, to poll for hold events. Defaults to `200`.\n *   * `events` - An array of `onHold` events which each contain a `name` and `time`. The `time`\n *     controls the amount of time that must pass before this `onHold` event is fired and should\n *     be a multiple of `frequency`.\n *\n * @function\n * @param   {Object}     cfg  A partial or complete configuration object\n *\n * @returns {undefined}\n * @public\n * @memberof ui/Touchable\n */\n\n\nexports.mergeConfig = mergeConfig;\n\nvar configure = function configure(cfg) {\n  config = mergeConfig(cfg);\n};\n\nexports.configure = configure;\n\nvar getConfig = function getConfig() {\n  return config;\n};\n\nexports.getConfig = getConfig;\n\nvar resetDefaultConfig = function resetDefaultConfig() {\n  return configure({\n    drag: _Drag.defaultDragConfig,\n    hold: _Hold.defaultHoldConfig,\n    flick: _Flick.defaultFlickConfig\n  });\n};\n\nexports.resetDefaultConfig = resetDefaultConfig;\nresetDefaultConfig();\nvar _default = configure;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/sonjaeseong/workspace/webOS/CARROT/webOS_GUI/node_modules/@enact/ui/Touchable/config.js"],"names":["Object","defineProperty","exports","value","resetDefaultConfig","mergeConfig","getConfig","configure","_Drag","require","_Flick","_Hold","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","configurable","writable","allowedDragKeys","defaultDragConfig","allowedFlickKeys","defaultFlickConfig","allowedHoldKeys","defaultHoldConfig","config","clone","o","assign","mergeGestureConfig","current","update","allowed","cfg","indexOf","merged","drag","flick","hold","events","map","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resetDefaultConfig = exports.mergeConfig = exports.getConfig = exports.configure = exports[\"default\"] = void 0;\n\nvar _Drag = require(\"./Drag.js\");\n\nvar _Flick = require(\"./Flick.js\");\n\nvar _Hold = require(\"./Hold.js\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar allowedDragKeys = Object.keys(_Drag.defaultDragConfig);\nvar allowedFlickKeys = Object.keys(_Flick.defaultFlickConfig);\nvar allowedHoldKeys = Object.keys(_Hold.defaultHoldConfig);\n/**\n * The Global Gesture Configuration Object\n *\n * @private\n * @memberof ui/Touchable\n */\n\nvar config = {}; // map-friendly clone method\n\nvar clone = function clone(o) {\n  return Object.assign({}, o);\n}; // Merges two configuation objects while retaining only the allowed keys\n\n\nvar mergeGestureConfig = function mergeGestureConfig(current, update, allowed) {\n  var cfg = _objectSpread(_objectSpread({}, current), update);\n\n  Object.keys(cfg).forEach(function (key) {\n    if (allowed.indexOf(key) === -1) {\n      delete cfg[key];\n    }\n  });\n  return cfg;\n}; // Merges the current global config with the provided `cfg` and returns the result\n\n\nvar mergeConfig = function mergeConfig(cfg) {\n  var merged = {\n    drag: mergeGestureConfig(config.drag, cfg.drag, allowedDragKeys),\n    flick: mergeGestureConfig(config.flick, cfg.flick, allowedFlickKeys),\n    hold: mergeGestureConfig(config.hold, cfg.hold, allowedHoldKeys)\n  };\n  merged.hold.events = merged.hold.events.map(clone);\n  return merged;\n};\n/**\n * Configures the global gesture configuration for the application.\n *\n * Example:\n * ```\n * // Updates the `maxMoves`, `moveTolerance`, and `frequency` configurations while retaining the\n * // current value of all other configurations\n * configure({\n *     flick: {\n *         maxMoves: 10\n *     },\n *     hold: {\n *         moveTolerance: 32,\n *         frequency: 400\n *     }\n * });\n * ```\n *\n * Each type of gesture has its own set of configuration properties grouped within a separate object\n * keyed by the name of the gesture. Partial configurations may be passed and will be merged with\n * the current configuration.\n *\n * `drag`\n *\n *   * `boxSizing` - The part of the component's box model is used as the bounds of the constraint.\n *     Only applies when `global` is `false`.\n *     * `'border-box'` - the default, includes the padding and border but excludes the margin.\n *     * `'content-box'` - excludes the padding, border, and margin.\n *   * `global` - When `true`, drag gestures will continue when leaving the bounds of the component\n *      or blurring the component.\n *   * `moveTolerance` - The number of pixels from the start position of the drag that the pointer\n *     may move before cancelling the drag. Defaults to `16`.\n *\n * `flick`\n *\n *   * `maxDuration` - The amount of time, in milliseconds, to complete a flick gesture before it\n *     is cancelled. Defaults to 250.\n *   * `maxMoves` - The number of moves tracked to determine if a flick occurred. Defaults to `5`.\n *   * `minVelocity` - The minimum threshold, measured as the change in pixels over the change in\n *     time per move, that must be exceeded to generate a `onFlick` event.\n *\n * `hold`\n *\n *   * `cancelOnMove` - When `true`, the hold is cancelled when moving beyond the `moveTolerance`.\n *     Defaults to `false`\n *   * `global` - When `true`, hold gestures will continue when leaving the bounds of the component\n *      or blurring the component.\n *   * `moveTolerance` - The number of pixels from the start position of the hold that the pointer\n *     may move before cancelling the hold. Ignored when `cancelOnMove` is `false`. Defaults to\n *     `16`.\n *   * `frequency` - The time, in milliseconds, to poll for hold events. Defaults to `200`.\n *   * `events` - An array of `onHold` events which each contain a `name` and `time`. The `time`\n *     controls the amount of time that must pass before this `onHold` event is fired and should\n *     be a multiple of `frequency`.\n *\n * @function\n * @param   {Object}     cfg  A partial or complete configuration object\n *\n * @returns {undefined}\n * @public\n * @memberof ui/Touchable\n */\n\n\nexports.mergeConfig = mergeConfig;\n\nvar configure = function configure(cfg) {\n  config = mergeConfig(cfg);\n};\n\nexports.configure = configure;\n\nvar getConfig = function getConfig() {\n  return config;\n};\n\nexports.getConfig = getConfig;\n\nvar resetDefaultConfig = function resetDefaultConfig() {\n  return configure({\n    drag: _Drag.defaultDragConfig,\n    hold: _Hold.defaultHoldConfig,\n    flick: _Flick.defaultFlickConfig\n  });\n};\n\nexports.resetDefaultConfig = resetDefaultConfig;\nresetDefaultConfig();\nvar _default = configure;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}