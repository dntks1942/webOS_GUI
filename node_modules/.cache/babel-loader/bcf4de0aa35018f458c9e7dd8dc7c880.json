{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActivityPanels = exports[\"default\"] = void 0;\n\nvar _Slottable = _interopRequireDefault(require(\"@enact/ui/Slottable\"));\n\nvar _Measurable = _interopRequireDefault(require(\"@enact/ui/Measurable\"));\n\nvar _compose = _interopRequireDefault(require(\"ramda/src/compose\"));\n\nvar _Skinnable = _interopRequireDefault(require(\"../Skinnable\"));\n\nvar _Arrangers = require(\"./Arrangers\");\n\nvar _BreadcrumbDecorator = _interopRequireDefault(require(\"./BreadcrumbDecorator\"));\n\nvar _Panels = require(\"./Panels\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ActivityPanelsDecorator = (0, _compose[\"default\"])((0, _Slottable[\"default\"])({\n  slots: ['controls']\n}), (0, _Measurable[\"default\"])({\n  refProp: 'controlsRef',\n  measurementProp: 'controlsMeasurements'\n}), _Skinnable[\"default\"], (0, _BreadcrumbDecorator[\"default\"])({\n  className: 'panels activity enact-fit',\n  max: 1,\n  panelArranger: _Arrangers.ActivityArranger\n}));\n/**\n * An instance of Panels in which the Panel uses the entire viewable screen with a single breadcrumb\n * for the previous panel when viewing any panel beyond the first.\n *\n * **Note** ActivityPanels requires that the `data-index` property that all panels variations add to\n * its children be applied to the root DOM node of each child in order to manage layout correctly.\n * It is recommended that you spread any extra props on the root node but you may also handle this\n * property explicitly if necessary.\n *\n * @class ActivityPanels\n * @memberof moonstone/Panels\n * @ui\n * @public\n */\n\nvar ActivityPanels = ActivityPanelsDecorator(_Panels.PanelsBase);\nexports.ActivityPanels = ActivityPanels;\nvar _default = ActivityPanels;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/sonjaeseong/workspace/webOS/CARROT/webOS_GUI/node_modules/@enact/moonstone/Panels/ActivityPanels.js"],"names":["Object","defineProperty","exports","value","ActivityPanels","_Slottable","_interopRequireDefault","require","_Measurable","_compose","_Skinnable","_Arrangers","_BreadcrumbDecorator","_Panels","obj","__esModule","ActivityPanelsDecorator","slots","refProp","measurementProp","className","max","panelArranger","ActivityArranger","PanelsBase","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,cAAR,GAAyBF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAAnD;;AAEA,IAAIG,UAAU,GAAGC,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAAvC;;AAEA,IAAIC,WAAW,GAAGF,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAAxC;;AAEA,IAAIE,QAAQ,GAAGH,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAArC;;AAEA,IAAIG,UAAU,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAvC;;AAEA,IAAII,UAAU,GAAGJ,OAAO,CAAC,aAAD,CAAxB;;AAEA,IAAIK,oBAAoB,GAAGN,sBAAsB,CAACC,OAAO,CAAC,uBAAD,CAAR,CAAjD;;AAEA,IAAIM,OAAO,GAAGN,OAAO,CAAC,UAAD,CAArB;;AAEA,SAASD,sBAAT,CAAgCQ,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIE,uBAAuB,GAAG,CAAC,GAAGP,QAAQ,CAAC,SAAD,CAAZ,EAAyB,CAAC,GAAGJ,UAAU,CAAC,SAAD,CAAd,EAA2B;AAChFY,EAAAA,KAAK,EAAE,CAAC,UAAD;AADyE,CAA3B,CAAzB,EAE1B,CAAC,GAAGT,WAAW,CAAC,SAAD,CAAf,EAA4B;AAC9BU,EAAAA,OAAO,EAAE,aADqB;AAE9BC,EAAAA,eAAe,EAAE;AAFa,CAA5B,CAF0B,EAK1BT,UAAU,CAAC,SAAD,CALgB,EAKH,CAAC,GAAGE,oBAAoB,CAAC,SAAD,CAAxB,EAAqC;AAC9DQ,EAAAA,SAAS,EAAE,2BADmD;AAE9DC,EAAAA,GAAG,EAAE,CAFyD;AAG9DC,EAAAA,aAAa,EAAEX,UAAU,CAACY;AAHoC,CAArC,CALG,CAA9B;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAInB,cAAc,GAAGY,uBAAuB,CAACH,OAAO,CAACW,UAAT,CAA5C;AACAtB,OAAO,CAACE,cAAR,GAAyBA,cAAzB;AACA,IAAIqB,QAAQ,GAAGrB,cAAf;AACAF,OAAO,CAAC,SAAD,CAAP,GAAqBuB,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActivityPanels = exports[\"default\"] = void 0;\n\nvar _Slottable = _interopRequireDefault(require(\"@enact/ui/Slottable\"));\n\nvar _Measurable = _interopRequireDefault(require(\"@enact/ui/Measurable\"));\n\nvar _compose = _interopRequireDefault(require(\"ramda/src/compose\"));\n\nvar _Skinnable = _interopRequireDefault(require(\"../Skinnable\"));\n\nvar _Arrangers = require(\"./Arrangers\");\n\nvar _BreadcrumbDecorator = _interopRequireDefault(require(\"./BreadcrumbDecorator\"));\n\nvar _Panels = require(\"./Panels\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar ActivityPanelsDecorator = (0, _compose[\"default\"])((0, _Slottable[\"default\"])({\n  slots: ['controls']\n}), (0, _Measurable[\"default\"])({\n  refProp: 'controlsRef',\n  measurementProp: 'controlsMeasurements'\n}), _Skinnable[\"default\"], (0, _BreadcrumbDecorator[\"default\"])({\n  className: 'panels activity enact-fit',\n  max: 1,\n  panelArranger: _Arrangers.ActivityArranger\n}));\n/**\n * An instance of Panels in which the Panel uses the entire viewable screen with a single breadcrumb\n * for the previous panel when viewing any panel beyond the first.\n *\n * **Note** ActivityPanels requires that the `data-index` property that all panels variations add to\n * its children be applied to the root DOM node of each child in order to manage layout correctly.\n * It is recommended that you spread any extra props on the root node but you may also handle this\n * property explicitly if necessary.\n *\n * @class ActivityPanels\n * @memberof moonstone/Panels\n * @ui\n * @public\n */\n\nvar ActivityPanels = ActivityPanelsDecorator(_Panels.PanelsBase);\nexports.ActivityPanels = ActivityPanels;\nvar _default = ActivityPanels;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}