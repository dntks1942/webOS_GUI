{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerDefaultElement = getContainerDefaultElement;\nexports.getContainerLastFocusedElement = getContainerLastFocusedElement;\nexports.getContainerNavigableElements = getContainerNavigableElements;\nexports.getContainersForNode = getContainersForNode;\nexports.setContainerLastFocusedElement = setContainerLastFocusedElement;\nexports.getContainerFocusTarget = getContainerFocusTarget;\nexports.getContainerPreviousTarget = getContainerPreviousTarget;\nexports.getDefaultContainer = getDefaultContainer;\nexports.getLastContainer = getLastContainer;\nexports.getNavigableContainersForNode = getNavigableContainersForNode;\nexports.isWithinOverflowContainer = isWithinOverflowContainer;\nexports.mayActivateContainer = mayActivateContainer;\nexports.notifyLeaveContainer = notifyLeaveContainer;\nexports.notifyLeaveContainerFail = notifyLeaveContainerFail;\nexports.notifyEnterContainer = notifyEnterContainer;\nexports.setContainerPreviousTarget = setContainerPreviousTarget;\nexports.setDefaultContainer = setDefaultContainer;\nexports.setLastContainer = setLastContainer;\nexports.setLastContainerFromTarget = setLastContainerFromTarget;\nexports.unmountContainer = unmountContainer;\nexports.rootContainerId = exports.removeContainer = exports.removeAllContainers = exports.isNavigable = exports.isContainer = exports.getSpottableDescendants = exports.getDeepSpottableDescendants = exports.getContainerId = exports.configureContainer = exports.configureDefaults = exports.containerAttribute = exports.addContainer = exports.isContainer5WayHoldable = exports.getContainerConfig = exports.getContainerNode = exports.getAllContainerIds = void 0;\n\nvar _and = _interopRequireDefault(require(\"ramda/src/and\"));\n\nvar _concat = _interopRequireDefault(require(\"ramda/src/concat\"));\n\nvar _util = require(\"@enact/core/util\");\n\nvar _intersection = _interopRequireDefault(require(\"ramda/src/intersection\"));\n\nvar _last = _interopRequireDefault(require(\"ramda/src/last\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar containerAttribute = 'data-spotlight-id';\nexports.containerAttribute = containerAttribute;\nvar containerConfigs = new Map();\nvar containerKey = 'spotlightId';\nvar disabledKey = 'spotlightContainerDisabled';\nvar containerPrefix = 'container-';\nvar containerSelector = '[data-spotlight-container]';\nvar rootContainerId = 'spotlightRootDecorator';\nexports.rootContainerId = rootContainerId;\nvar reverseDirections = {\n  'left': 'right',\n  'up': 'down',\n  'right': 'left',\n  'down': 'up'\n}; // Incrementer for container IDs\n\nvar _ids = 0;\nvar _defaultContainerId = '';\nvar _lastContainerId = ''; // Note: an <extSelector> can be one of following types:\n// - a valid selector string for \"querySelectorAll\"\n// - a NodeList or an array containing DOM elements\n// - a single DOM element\n// - a string \"@<containerId>\" to indicate the specified container\n// - a string \"@\" to indicate the default container\n\nvar GlobalConfig = {\n  // set to false for unmounted containers to omit them from searches\n  active: true,\n  continue5WayHold: false,\n  defaultElement: '',\n  // <extSelector> except \"@\" syntax.\n  enterTo: '',\n  // '', 'last-focused', 'default-element'\n  lastFocusedElement: null,\n  lastFocusedKey: null,\n  lastFocusedPersist: function lastFocusedPersist(node, all) {\n    var container = typeof node === 'string';\n    return {\n      container: container,\n      element: !container,\n      key: container ? node : all.indexOf(node)\n    };\n  },\n  lastFocusedRestore: function lastFocusedRestore(_ref, all) {\n    var container = _ref.container,\n        key = _ref.key;\n    return container ? key : all[key];\n  },\n  leaveFor: null,\n  // {left: <extSelector>, right: <extSelector>, up: <extSelector>, down: <extSelector>}\n  navigableFilter: null,\n  obliqueMultiplier: 5,\n  onEnterContainer: null,\n  // @private - notify the container when entering via 5-way\n  onLeaveContainer: null,\n  // @private - notify the container when leaving via 5-way\n  onLeaveContainerFail: null,\n  // @private - notify the container when failing to leave via 5-way\n  overflow: false,\n  partition: false,\n  // use the container bounds for partitioning when leaving\n  rememberSource: false,\n  restrict: 'self-first',\n  // 'self-first', 'self-only', 'none'\n  selector: '',\n  // can be a valid <extSelector> except \"@\" syntax.\n  selectorDisabled: false,\n  straightMultiplier: 1,\n  straightOnly: false,\n  straightOverlapThreshold: 0.5,\n  tabIndexIgnoreList: 'a, input, select, textarea, button, iframe, [contentEditable=true]'\n};\n/**\n * Calculates nodes within `node` that match `includeSelector` and do not match `excludeSelector`\n *\n * @param   {Node}    node             DOM Node to query\n * @param   {String}  includeSelector  CSS selector of nodes to include\n * @param   {String}  excludeSelector  CSS selector for nodes to exclude\n *\n * @returns {Node[]}                   Array of nodes\n * @memberof spotlight/container\n * @private\n */\n\nvar querySelector = function querySelector(node, includeSelector, excludeSelector) {\n  var include = Array.prototype.slice.call(node.querySelectorAll(includeSelector));\n  var exclude = node.querySelectorAll(excludeSelector);\n\n  for (var i = 0; i < exclude.length; i++) {\n    var index = include.indexOf(exclude.item(i));\n\n    if (index >= 0) {\n      include.splice(index, 1);\n    }\n  }\n\n  return include;\n};\n/**\n * Determines if `node` is a spotlight container\n *\n * @param   {Node}     node   Node to check\n *\n * @returns {Boolean}        `true` if `node` is a spotlight container\n * @memberof spotlight/container\n * @private\n */\n\n\nvar isContainerNode = function isContainerNode(node) {\n  return node && node.dataset && 'spotlightContainer' in node.dataset;\n};\n/**\n * Walks up the node hierarchy calling `fn` on each node that is a container\n *\n * @param   {Node}     node  Node from which to start the search\n * @param   {Function} fn    Called once for each container with the container node as the first\n *                           argument. The return value is accumulated in the array returned by\n *                           `mapContainers`\n *\n * @returns {Array}          Array of values returned by `fn` in order of outermost container to\n *                           innermost container\n * @memberof spotlight/container\n * @private\n */\n\n\nvar mapContainers = function mapContainers(node, fn) {\n  var result = [];\n\n  while (node && node !== document) {\n    if (isContainerNode(node)) {\n      result.unshift(fn(node));\n    }\n\n    node = node.parentNode;\n  }\n\n  return result;\n};\n/**\n * Returns the container config for `containerId`\n *\n * @param   {String}  id  Container ID\n *\n * @returns {Object}      Container config\n * @memberof spotlight/container\n * @private\n */\n\n\nvar getContainerConfig = function getContainerConfig(id) {\n  return containerConfigs.get(id);\n};\n/**\n * Determines if node or a container id represents a spotlight container\n *\n * @param   {Node|String}  nodeOrId  Node or container ID\n *\n * @returns {Boolean}                `true` if `nodeOrId` represents a spotlight container\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.getContainerConfig = getContainerConfig;\n\nvar isContainer = function isContainer(nodeOrId) {\n  if (typeof nodeOrId === 'string') {\n    return containerConfigs.has(nodeOrId);\n  }\n\n  return isContainerNode(nodeOrId);\n};\n/**\n * Determines if any of the containers at or above `node` are disabled and, if so, returns `false`.\n *\n * @param   {Node}     node  Spottable node or spotlight container\n *\n * @returns {Boolean}        `true` if all container ancestors are enabled\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.isContainer = isContainer;\n\nvar isContainerEnabled = function isContainerEnabled(node) {\n  return mapContainers(node, function (container) {\n    return container.dataset[disabledKey] !== 'true';\n  }).reduce(_and[\"default\"], true);\n};\n/**\n * Returns the container ID for `node`\n *\n * @param   {Node}    node  Container Node\n *\n * @returns {String}        Container ID\n * @memberof spotlight/container\n * @private\n */\n\n\nvar getContainerId = function getContainerId(node) {\n  return node.dataset[containerKey];\n};\n/**\n * Generates a CSS selector string for a current container if `node` is a container\n *\n * @param   {Node}    node  Container Node\n *\n * @returns {String}        CSS selector\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.getContainerId = getContainerId;\n\nvar getContainerSelector = function getContainerSelector(node) {\n  if (isContainerNode(node)) {\n    return \"[\".concat(containerAttribute, \"=\\\"\").concat(getContainerId(node), \"\\\"]\");\n  }\n\n  return '';\n};\n/**\n * Generates a CSS selector string for containers within `node` if it is a container\n *\n * @param   {Node}    node  Container Node\n *\n * @returns {String}        CSS selector\n * @memberof spotlight/container\n * @private\n */\n\n\nvar getSubContainerSelector = function getSubContainerSelector(node) {\n  if (isContainerNode(node)) {\n    return \"\".concat(getContainerSelector(node), \" \").concat(containerSelector);\n  }\n\n  return containerSelector;\n};\n/**\n * Returns the node for a container\n *\n * @param   {String}  containerId  ID of container\n *\n * @returns {Node}                 DOM node of the container\n * @memberof spotlight/container\n * @private\n */\n\n\nvar getContainerNode = function getContainerNode(containerId) {\n  if (!containerId) {\n    return null;\n  } else if (containerId === rootContainerId) {\n    return document;\n  }\n\n  return document.querySelector(\"[\".concat(containerAttribute, \"=\\\"\").concat(containerId, \"\\\"]\"));\n};\n/**\n * Calls the `navigableFilter` function for the container if defined.\n *\n * @param   {Node}    node         DOM node to check if it is navigable\n * @param   {String}  containerId  ID of container\n *\n * @returns {Boolean}              `true` if it passes the `navigableFilter` method or if that\n *                                  method is not defined for the container\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.getContainerNode = getContainerNode;\n\nvar navigableFilter = function navigableFilter(node, containerId) {\n  var config = getContainerConfig(containerId);\n\n  if (config && typeof config.navigableFilter === 'function') {\n    if (config.navigableFilter(node, containerId) === false) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Determines nodes that are owned by `node` based on `aria-owns`.\n *\n * @param   {Node}   node          Owner\n *\n * @returns {Node[]}               Array of owned nodes\n * @memberof spotlight/container\n * @private\n */\n\n\nvar getOwnedNodes = function getOwnedNodes(node, selector) {\n  // if node is document, it will not have getAttribute and therefore can't have aria-owns\n  var owns = node && node.getAttribute && node.getAttribute('aria-owns');\n\n  if (owns) {\n    var ids = owns.split(' ');\n    return ids.map(function (id) {\n      return id && document.getElementById(id);\n    }).filter(Boolean).filter(function (n) {\n      return isContainerNode(n) || (0, _utils.matchSelector)(selector, n);\n    });\n  }\n\n  return [];\n};\n/**\n * Determines all spottable elements and containers that are directly contained by the container\n * identified by `containerId` and no other subcontainers.\n *\n * @param   {String}  containerId  ID of container\n *\n * @returns {Node[]}               Array of spottable elements and containers.\n * @memberof spotlight/container\n * @public\n */\n\n\nvar getSpottableDescendants = function getSpottableDescendants(containerId) {\n  var node = getContainerNode(containerId); // if it's falsy or is a disabled container, return an empty set\n\n  if (!node || isContainerNode(node) && !isContainerEnabled(node)) {\n    return [];\n  }\n\n  var _ref2 = getContainerConfig(containerId) || {},\n      selector = _ref2.selector,\n      selectorDisabled = _ref2.selectorDisabled;\n\n  if (!selector || selectorDisabled) {\n    return [];\n  }\n\n  var spottableSelector = selector;\n  var subContainerSelector = getSubContainerSelector(node);\n  var candidates = querySelector(node, \"\".concat(spottableSelector, \", \").concat(getContainerSelector(node), \" \").concat(containerSelector, \":not([data-spotlight-container-disabled=\\\"true\\\"])\"), \"\".concat(subContainerSelector, \" \").concat(spottableSelector, \", \").concat(subContainerSelector, \" \").concat(containerSelector));\n  candidates.push.apply(candidates, _toConsumableArray(getOwnedNodes(node, selector)));\n  return candidates.filter(function (n) {\n    return navigableFilter(n, containerId);\n  });\n};\n/**\n * Recursively get spottable descendants by including elements within sub-containers that do not\n * have `enterTo` configured\n *\n * @param   {String}    containerId          ID of container\n * @param   {String[]}  [excludedContainers] IDs of containers to exclude from result set\n *\n * @returns {Node[]}                         Array of spottable elements and containers\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.getSpottableDescendants = getSpottableDescendants;\n\nvar getDeepSpottableDescendants = function getDeepSpottableDescendants(containerId, excludedContainers) {\n  return getSpottableDescendants(containerId).map(function (n) {\n    if (isContainer(n)) {\n      var id = getContainerId(n);\n      var config = getContainerConfig(id);\n\n      if (excludedContainers && excludedContainers.indexOf(id) >= 0) {\n        return [];\n      } else if (config && !config.enterTo) {\n        return getDeepSpottableDescendants(id, excludedContainers);\n      }\n    }\n\n    return [n];\n  }).reduce(_concat[\"default\"], []);\n};\n/**\n * Determines if a container allows 5-way key hold to be preserved or not.\n *\n * @param {String} containerId Container Id\n * @returns {Boolean} `true` if a container is 5 way holdable\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.getDeepSpottableDescendants = getDeepSpottableDescendants;\n\nvar isContainer5WayHoldable = function isContainer5WayHoldable(containerId) {\n  var config = getContainerConfig(containerId);\n  return config && config.continue5WayHold || false;\n};\n/**\n * Returns an array of ids for containers that wrap the element, in order of outer-to-inner, with\n * the last array item being the immediate container id of the element.\n *\n * @param   {Node}      node  Node from which to start the search\n *\n * @returns {String[]}        Array on container IDs\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.isContainer5WayHoldable = isContainer5WayHoldable;\n\nfunction getContainersForNode(node) {\n  var containers = mapContainers(node, getContainerId);\n  containers.unshift(rootContainerId);\n  return containers;\n}\n/**\n * Returns an array of ids for containers that wrap the element, in order of outer-to-inner, with\n * the last array item being the immediate container id of the element. The container ids are\n * limited to only those between `node` and the first restrict=\"self-only\" container.\n *\n * @param   {Node}      node  Node from which to start the search\n *\n * @returns {String[]}        Array on container IDs\n * @memberof spotlight/container\n * @private\n */\n\n\nfunction getNavigableContainersForNode(node) {\n  var containerIds = getContainersForNode(node); // find first self-only container id\n\n  var selfOnlyIndex = containerIds.map(getContainerConfig).filter(function (config) {\n    return config != null;\n  }).reduceRight(function (index, config, i) {\n    if (index === -1 && config.restrict === 'self-only') {\n      return i;\n    }\n\n    return index;\n  }, -1); // if we found one (and it's not the root), slice those off and return\n\n  if (selfOnlyIndex > 0) {\n    return containerIds.slice(selfOnlyIndex);\n  }\n\n  return containerIds;\n}\n/**\n * Generates a new unique identifier for a container\n *\n * @returns {String} Container ID\n * @memberof spotlight/container\n * @private\n */\n\n\nfunction generateId() {\n  var id;\n  /* eslint no-constant-condition: [\"error\", { \"checkLoops\": false }] */\n\n  while (true) {\n    id = containerPrefix + String(++_ids);\n\n    if (!isContainer(id)) {\n      break;\n    }\n  }\n\n  return id;\n}\n/**\n * Merges two container configurations while only allowing keys from `updated` which are defined in\n * `GlobalConfig`\n *\n * @param   {Object}  current  Current container configuration\n * @param   {Object}  updated  Updated configuration which may only be a partial configuration\n *\n * @returns {Object}           Merged configuration\n * @memberof spotlight/container\n * @private\n */\n\n\nvar mergeConfig = function mergeConfig(current, updated) {\n  if (!updated) return current;\n  var cfg = null;\n  Object.keys(updated).forEach(function (key) {\n    if (key in GlobalConfig && current[key] !== updated[key]) {\n      if (cfg == null) {\n        cfg = Object.assign({}, current);\n      }\n\n      cfg[key] = updated[key];\n    }\n  });\n  return cfg || current;\n};\n/**\n * Adds or updates a container. When a container id is not specified, it will be generated.\n *\n * @param   {String|Object}  containerIdOrConfig  Either a string container id or a configuration\n *                                                object.\n * @param   {Object}         [config]             Container configuration when `containerIdOrConfig`\n *                                                is a string. When omitted, the container will have\n *                                                the default `GlobalConfig`.\n *\n * @returns {String}                              The container id\n * @memberof spotlight/container\n * @public\n */\n\n\nvar configureContainer = function configureContainer() {\n  var containerId, config;\n\n  if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'object') {\n    config = arguments.length <= 0 ? undefined : arguments[0];\n    containerId = config.id;\n  } else if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n    containerId = arguments.length <= 0 ? undefined : arguments[0];\n\n    if (typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'object') {\n      config = arguments.length <= 1 ? undefined : arguments[1];\n    }\n  }\n\n  if (!containerId) {\n    containerId = generateId();\n  }\n\n  config = mergeConfig(containerConfigs.get(containerId) || _objectSpread({}, GlobalConfig), config);\n  containerConfigs.set(containerId, config);\n  return containerId;\n};\n/**\n * Adds a container and marks it active. When a container id is not specified, it will be generated.\n *\n * @param   {String|Object}  containerIdOrConfig  Either a string container id or a configuration\n *                                                object.\n * @param   {Object}         [config]             Container configuration when `containerIdOrConfig`\n *                                                is a string. When omitted, the container will have\n *                                                the default `GlobalConfig`.\n *\n * @returns {String}                              The container id\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.configureContainer = configureContainer;\n\nvar addContainer = function addContainer() {\n  var containerId = configureContainer.apply(void 0, arguments);\n  var config = getContainerConfig(containerId);\n  config.active = true;\n  return containerId;\n};\n/**\n * Removes a container\n *\n * @param   {String}     containerId  ID of the container to remove\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.addContainer = addContainer;\n\nvar removeContainer = function removeContainer(containerId) {\n  containerConfigs[\"delete\"](containerId);\n};\n/**\n * Removes all containers\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.removeContainer = removeContainer;\n\nvar removeAllContainers = function removeAllContainers() {\n  containerConfigs.clear();\n};\n/**\n * Configures the `GlobalConfig` for containers\n *\n * @param   {Object}  config  New global configuration. Cannot introduce new keys\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.removeAllContainers = removeAllContainers;\n\nvar configureDefaults = function configureDefaults(config) {\n  GlobalConfig = mergeConfig(GlobalConfig, config);\n};\n/**\n * Determines if `node` is a navigable element within the container identified by `containerId`.\n *\n * @param   {Node}     node         DOM node to check if it is navigable\n * @param   {String}   containerId  ID of the container containing `node`\n * @param   {Boolean}  verify       `true` to verify the node matches the container's `selector`\n *\n * @returns {Boolean}               `true` if `node` is navigable\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.configureDefaults = configureDefaults;\n\nvar isNavigable = function isNavigable(node, containerId, verify) {\n  if (!node || // jsdom reports all nodes as having no size so we must skip this condition in our tests\n  process.env.NODE_ENV !== 'test' && node.offsetWidth <= 0 && node.offsetHeight <= 0) {\n    return false;\n  }\n\n  var containerNode = getContainerNode(containerId);\n\n  if (containerNode !== document && containerNode.dataset[disabledKey] === 'true') {\n    return false;\n  }\n\n  var config = getContainerConfig(containerId);\n\n  if (verify && config && config.selector && !isContainer(node) && !(0, _utils.matchSelector)(config.selector, node)) {\n    return false;\n  }\n\n  return navigableFilter(node, containerId);\n};\n/**\n * Returns the IDs of all containers\n *\n * @returns {String[]}  Array of container IDs\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.isNavigable = isNavigable;\n\nvar getAllContainerIds = function getAllContainerIds() {\n  var ids = [];\n  var keys = containerConfigs.keys(); // PhantomJS-friendly iterator->array conversion\n\n  var id;\n\n  while ((id = keys.next()) && !id.done) {\n    if (isActiveContainer(id.value)) {\n      ids.push(id.value);\n    }\n  }\n\n  return ids;\n};\n/**\n * Returns the default focus element for a container\n *\n * @param   {String}                             containerId        ID of container\n * @param   {('last-focused'|'default-element')} [preferredEnterTo] Prefer the given enterTo\n *                                                                  configuration\n *\n * @returns {Node|null}                 Default focus element\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.getAllContainerIds = getAllContainerIds;\n\nfunction getContainerDefaultElement(containerId, preferredEnterTo) {\n  var config = getContainerConfig(containerId);\n  var defaultElementSelector = config && config.defaultElement;\n\n  if (!defaultElementSelector) {\n    return null;\n  }\n\n  defaultElementSelector = (0, _util.coerceArray)(defaultElementSelector); // If a preferred enterTo has been provided, we will favor it by making it first in search array\n\n  if (preferredEnterTo && typeof preferredEnterTo === 'string' && preferredEnterTo !== 'default-element') {\n    defaultElementSelector.unshift(preferredEnterTo);\n  }\n\n  var spottables = getDeepSpottableDescendants(containerId);\n  return defaultElementSelector.reduce(function (result, selector) {\n    if (result) {\n      return result;\n    }\n\n    if (typeof selector === 'string') {\n      return spottables.filter(function (elem) {\n        return (0, _utils.matchSelector)(selector, elem) && isNavigable(elem, containerId, true);\n      })[0];\n    } // FIXME: There is some prior implicit support for `defaultElement` to be an element rather\n    // than a selector. This continues that support but should eventually be removed.\n\n\n    return selector;\n  }, null);\n}\n/**\n * Gets the element last focused within the container.\n *\n * @param   {String}       containerId  ID of container\n *\n * @returns {Node|String|null}               DOM Node last focused\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction getContainerLastFocusedElement(containerId) {\n  var config = getContainerConfig(containerId);\n\n  if (!config || !config.lastFocusedElement) {\n    return null;\n  } // lastFocusedElement may be a container ID so try to convert it to a node to test navigability\n\n\n  var lastFocusedElement = config.lastFocusedElement;\n  var node = lastFocusedElement;\n\n  if (typeof node === 'string') {\n    node = getContainerNode(lastFocusedElement);\n  }\n\n  return isNavigable(node, containerId, true) ? lastFocusedElement : null;\n}\n/**\n * Sets the element last focused within the container\n *\n * @param   {Node}      node         DOM node last focused\n * @param   {String[]}  containerId  ID of container\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction setContainerLastFocusedElement(node, containerIds) {\n  var lastFocusedElement = node;\n\n  for (var i = containerIds.length - 1; i > -1; i--) {\n    var id = containerIds[i];\n    configureContainer(id, {\n      lastFocusedElement: lastFocusedElement\n    }); // If any container in the stack is controlling entering focus, use its container id as the\n    // lastFocusedElement instead of the node\n\n    var config = getContainerConfig(id);\n\n    if (config.enterTo) {\n      lastFocusedElement = id;\n    }\n  }\n}\n/**\n * Returns all navigable nodes (spottable nodes or containers) visible from outside the container.\n * If the container is restricting navigation into itself via `enterTo`, this method will attempt to\n * return that element as the only element in an array. If that fails or if navigation is not\n * restricted, it will return an array of all possible navigable nodes.\n *\n * @param   {String}                             containerId        Container ID\n * @param   {('last-focused'|'default-element')} [preferredEnterTo] Prefer the given enterTo\n *                                                                  configuration\n *\n * @returns {Node[]}             Navigable elements within container\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction getContainerNavigableElements(containerId, preferredEnterTo) {\n  if (!isContainer(containerId)) {\n    return [];\n  }\n\n  var config = getContainerConfig(containerId);\n  var enterTo = config.enterTo,\n      overflow = config.overflow;\n  var enterLast = preferredEnterTo === 'last-focused' || enterTo === 'last-focused' && !preferredEnterTo;\n  var next; // if the container has a preferred entry point, try to find it first\n\n  if (enterLast) {\n    next = getContainerLastFocusedElement(containerId);\n  } // try default element if last focused can't be focused\n\n\n  if (!next) {\n    next = getContainerDefaultElement(containerId, preferredEnterTo);\n  }\n\n  if (!next) {\n    var spottables = overflow ? // overflow requires deep recursion to handle selecting the children of unrestricted\n    // containers or restricted containers larger than the container\n    getDeepSpottableDescendants(containerId) : getSpottableDescendants(containerId); // if there isn't a preferred entry on an overflow container, filter the visible elements\n\n    if (overflow) {\n      var containerRect = (0, _utils.getContainerRect)(containerId);\n      next = containerRect && spottables.filter(function (element) {\n        var elementRect = (0, _utils.getRect)(element);\n\n        if (isContainer(element)) {\n          return (0, _utils.intersects)(containerRect, elementRect);\n        }\n\n        return (0, _utils.contains)(containerRect, (0, _utils.getRect)(element));\n      });\n    } // otherwise, return all spottables within the container\n\n\n    if (!next) {\n      next = spottables;\n    }\n  }\n\n  return next ? (0, _util.coerceArray)(next) : [];\n}\n/**\n * Determines the preferred focus target, traversing any sub-containers as necessary, for the given\n * container.\n *\n * @param   {String}                             containerId        ID of container\n * @param   {('last-focused'|'default-element')} [preferredEnterTo] Prefer the given enterTo\n *                                                                  configuration\n *\n * @returns {Node}                 Preferred target as either a DOM node or container-id\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction getContainerFocusTarget(containerId, preferredEnterTo) {\n  // deferring restoration until it's requested to allow containers to prepare first\n  restoreLastFocusedElement(containerId);\n  var next = getContainerNavigableElements(containerId, preferredEnterTo); // If multiple candidates returned, we need to find the first viable target since some may\n  // be empty containers which should be skipped.\n\n  return next.reduce(function (result, element) {\n    if (result) {\n      return result;\n    } else if (isContainer(element)) {\n      var nextId = isContainerNode(element) ? getContainerId(element) : element;\n      return getContainerFocusTarget(nextId);\n    }\n\n    return element;\n  }, null) || null;\n}\n\nfunction getContainerPreviousTarget(containerId, direction, destination) {\n  var config = getContainerConfig(containerId);\n\n  if (config && config.rememberSource && config.previous && config.previous.reverse === direction && config.previous.destination === destination) {\n    return config.previous.target;\n  }\n}\n\nfunction setContainerPreviousTarget(containerId, direction, destination, target) {\n  var config = getContainerConfig(containerId);\n\n  if (config && config.rememberSource) {\n    configureContainer(containerId, {\n      previous: {\n        target: target,\n        destination: destination,\n        reverse: reverseDirections[direction]\n      }\n    });\n  }\n}\n/**\n * Saves the last focused element into `lastFocusedKey` using a container-defined serialization\n * method configured in `lastFocusedPersist`.\n *\n * @param   {String}     containerId  ID of container\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction persistLastFocusedElement(containerId) {\n  var cfg = getContainerConfig(containerId);\n\n  if (cfg) {\n    var lastFocusedElement = cfg.lastFocusedElement;\n\n    if (lastFocusedElement) {\n      var all = getDeepSpottableDescendants(containerId);\n      var lastFocusedKey = cfg.lastFocusedPersist(lastFocusedElement, all); // store lastFocusedKey and release node reference to lastFocusedElement\n\n      cfg.lastFocusedKey = lastFocusedKey;\n      cfg.lastFocusedElement = null;\n    }\n  }\n}\n/**\n * Restores the last focused element from `lastFocusedKey` using a container-defined deserialization\n * method configured in `lastFocusedRestore`.\n *\n * @param   {String}     containerId  ID of container\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction restoreLastFocusedElement(containerId) {\n  var cfg = getContainerConfig(containerId);\n\n  if (cfg && cfg.lastFocusedKey) {\n    var all = getDeepSpottableDescendants(containerId);\n    var lastFocusedElement = cfg.lastFocusedRestore(cfg.lastFocusedKey, all); // restore lastFocusedElement and release lastFocusedKey\n\n    cfg.lastFocusedKey = null;\n    cfg.lastFocusedElement = lastFocusedElement;\n  }\n}\n\nfunction unmountContainer(containerId) {\n  var config = getContainerConfig(containerId);\n\n  if (config) {\n    config.active = false;\n    persistLastFocusedElement(containerId);\n\n    if (typeof config.defaultElement !== 'string') {\n      config.defaultElement = null;\n    }\n  }\n}\n\nfunction isActiveContainer(containerId) {\n  var config = getContainerConfig(containerId);\n  return config && config.active;\n}\n/**\n * Determines if the provided container has a configured restriction.\n *\n * By default, returns `true` for `'self-only'` restrictions but the type of restriction can be\n * passed as well.\n *\n * @param {String} containerId The container id\n * @param {String} [restrict] The container restriction defaulted to `'self-only'`\n * @returns {Boolean} `true` if the container has the specified restriction\n * @private\n */\n\n\nfunction isRestrictedContainer(containerId) {\n  var restrict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'self-only';\n  var config = getContainerConfig(containerId);\n  return Boolean(config && config.restrict === restrict);\n}\n/**\n * Determines if `innerContainerId` is inside `outerContainerId`.\n *\n * @param {String} outerContainerId The outer container id\n * @param {String} innerContainerId The inner container id\n * @returns {Boolean} `true` if both containers exist and `innerContainerId` is within\n *                    `outerContainerId`\n * @private\n */\n\n\nfunction containsContainer(outerContainerId, innerContainerId) {\n  var outer = getContainerNode(outerContainerId);\n  var inner = getContainerNode(innerContainerId);\n  return Boolean(outer && inner && outer.contains(inner));\n}\n/**\n * Determines if `containerId` may become the active container.\n *\n * @param {String} containerId Spotlight container to which focus is leaving\n * @returns\t{Boolean} `true` if the active container can change to `containerId`\n * @private\n */\n\n\nfunction mayActivateContainer(containerId) {\n  var currentContainerId = getLastContainer(); // If the current container is restricted to 'self-only' and if the next container to be\n  // activated is not inside the currently activated container, the next container should not be\n  // activated.\n\n  return !isRestrictedContainer(currentContainerId) || containsContainer(currentContainerId, containerId);\n}\n\nfunction getDefaultContainer() {\n  return isActiveContainer(_defaultContainerId) ? _defaultContainerId : '';\n}\n\nfunction setDefaultContainer(containerId) {\n  if (!containerId) {\n    _defaultContainerId = '';\n  } else if (!getContainerConfig(containerId)) {\n    throw new Error('Container \"' + containerId + '\" doesn\\'t exist!');\n  } else {\n    _defaultContainerId = containerId;\n  }\n}\n\nfunction getLastContainer() {\n  return isActiveContainer(_lastContainerId) ? _lastContainerId : '';\n}\n\nfunction setLastContainer(containerId) {\n  _lastContainerId = containerId || '';\n}\n/**\n * Updates the last container based on the current focus and target focus.\n *\n * @param {Node} current Currently focused node\n * @param {Node} target  Target node. May or may not be focusable\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction setLastContainerFromTarget(current, target) {\n  var currentContainers = getNavigableContainersForNode(current);\n  var currentOuterContainerId = currentContainers[0];\n  var currentContainerConfig = getContainerConfig(currentOuterContainerId);\n  var targetContainers = getContainersForNode(target);\n  var targetInnerContainer = (0, _last[\"default\"])(targetContainers);\n  var sharedContainer = (0, _last[\"default\"])((0, _intersection[\"default\"])(currentContainers, targetContainers));\n\n  if (sharedContainer || !currentContainerConfig || currentContainerConfig.restrict !== 'self-only') {\n    // If the target shares a container with the current container stack or the current\n    // element isn't within a self-only container, use the target's nearest container\n    setLastContainer(targetInnerContainer);\n  } else {\n    // Otherwise, the target is not within the current container stack and the current\n    // element was within a 'self-only' container, use the current's outer container\n    setLastContainer(currentOuterContainerId);\n  }\n}\n\nfunction isWithinOverflowContainer(target) {\n  var containerIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getContainersForNode(target);\n  return containerIds // ignore the root container id which is set to overflow by the root decorator\n  .filter(function (id) {\n    return id !== rootContainerId;\n  }) // get the config for each container\n  .map(getContainerConfig) // and check if any are set to overflow\n  .some(function (config) {\n    return config && config.overflow;\n  });\n}\n/**\n * Notifies any affected containers that focus has left one of their children for another container\n *\n * @param {String} direction up/down/left/right\n * @param {Node} current currently focused element\n * @param {String[]} currentContainerIds Containers for current\n * @param {Node} next To be focused element\n * @param {String[]} nextContainerIds Containers for next\n * @private\n */\n\n\nfunction notifyLeaveContainer(direction, current, currentContainerIds, next, nextContainerIds) {\n  currentContainerIds.forEach(function (containerId) {\n    if (!nextContainerIds.includes(containerId)) {\n      var config = getContainerConfig(containerId);\n\n      if (config && config.onLeaveContainer) {\n        config.onLeaveContainer({\n          type: 'onLeaveContainer',\n          direction: direction,\n          target: current,\n          relatedTarget: next\n        });\n      }\n    }\n  });\n}\n/**\n * Notifies any containers that focus attempted to move but failed to find a target\n *\n * @param {String} direction up/down/left/right\n * @param {Node} current currently focused element\n * @param {String[]} currentContainerIds Containers for current\n * @private\n */\n\n\nfunction notifyLeaveContainerFail(direction, current, currentContainerIds) {\n  currentContainerIds.forEach(function (containerId) {\n    var config = getContainerConfig(containerId);\n\n    if (config && config.onLeaveContainerFail) {\n      config.onLeaveContainerFail({\n        type: 'onLeaveContainerFail',\n        direction: direction,\n        target: current\n      });\n    }\n  });\n}\n/**\n * Notifies any affected containers that one of their children has received focus.\n *\n * @param {String} direction up/down/left/right\n * @param {Node} previous Previously focused element\n * @param {String[]} previousContainerIds Containers for previous\n * @param {Node} current Currently focused element\n * @param {String[]} currentContainerIds Containers for current\n * @private\n */\n\n\nfunction notifyEnterContainer(direction, previous, previousContainerIds, current, currentContainerIds) {\n  currentContainerIds.forEach(function (containerId) {\n    if (!previousContainerIds.includes(containerId)) {\n      var config = getContainerConfig(containerId);\n\n      if (config && config.onEnterContainer) {\n        config.onEnterContainer({\n          type: 'onEnterContainer',\n          direction: direction,\n          target: current,\n          relatedTarget: previous\n        });\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/sonjaeseong/workspace/webOS/CARROT/webOS_GUI/node_modules/@enact/spotlight/src/container.js"],"names":["Object","defineProperty","exports","value","getContainerDefaultElement","getContainerLastFocusedElement","getContainerNavigableElements","getContainersForNode","setContainerLastFocusedElement","getContainerFocusTarget","getContainerPreviousTarget","getDefaultContainer","getLastContainer","getNavigableContainersForNode","isWithinOverflowContainer","mayActivateContainer","notifyLeaveContainer","notifyLeaveContainerFail","notifyEnterContainer","setContainerPreviousTarget","setDefaultContainer","setLastContainer","setLastContainerFromTarget","unmountContainer","rootContainerId","removeContainer","removeAllContainers","isNavigable","isContainer","getSpottableDescendants","getDeepSpottableDescendants","getContainerId","configureContainer","configureDefaults","containerAttribute","addContainer","isContainer5WayHoldable","getContainerConfig","getContainerNode","getAllContainerIds","_and","_interopRequireDefault","require","_concat","_util","_intersection","_last","_utils","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","arr2","containerConfigs","Map","containerKey","disabledKey","containerPrefix","containerSelector","reverseDirections","_ids","_defaultContainerId","_lastContainerId","GlobalConfig","active","continue5WayHold","defaultElement","enterTo","lastFocusedElement","lastFocusedKey","lastFocusedPersist","node","all","container","element","indexOf","lastFocusedRestore","_ref","leaveFor","navigableFilter","obliqueMultiplier","onEnterContainer","onLeaveContainer","onLeaveContainerFail","overflow","partition","rememberSource","restrict","selector","selectorDisabled","straightMultiplier","straightOnly","straightOverlapThreshold","tabIndexIgnoreList","querySelector","includeSelector","excludeSelector","include","querySelectorAll","exclude","index","item","splice","isContainerNode","dataset","mapContainers","fn","result","document","unshift","parentNode","id","get","nodeOrId","has","isContainerEnabled","reduce","getContainerSelector","concat","getSubContainerSelector","containerId","config","getOwnedNodes","owns","getAttribute","ids","split","map","getElementById","Boolean","matchSelector","_ref2","spottableSelector","subContainerSelector","candidates","excludedContainers","containers","containerIds","selfOnlyIndex","reduceRight","generateId","String","mergeConfig","current","updated","cfg","assign","undefined","set","clear","verify","process","env","NODE_ENV","offsetWidth","offsetHeight","containerNode","next","done","isActiveContainer","preferredEnterTo","defaultElementSelector","coerceArray","spottables","elem","enterLast","containerRect","getContainerRect","elementRect","getRect","intersects","contains","restoreLastFocusedElement","nextId","direction","destination","previous","reverse","persistLastFocusedElement","isRestrictedContainer","containsContainer","outerContainerId","innerContainerId","outer","inner","currentContainerId","Error","currentContainers","currentOuterContainerId","currentContainerConfig","targetContainers","targetInnerContainer","sharedContainer","some","currentContainerIds","nextContainerIds","includes","type","relatedTarget","previousContainerIds"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerDefaultElement = getContainerDefaultElement;\nexports.getContainerLastFocusedElement = getContainerLastFocusedElement;\nexports.getContainerNavigableElements = getContainerNavigableElements;\nexports.getContainersForNode = getContainersForNode;\nexports.setContainerLastFocusedElement = setContainerLastFocusedElement;\nexports.getContainerFocusTarget = getContainerFocusTarget;\nexports.getContainerPreviousTarget = getContainerPreviousTarget;\nexports.getDefaultContainer = getDefaultContainer;\nexports.getLastContainer = getLastContainer;\nexports.getNavigableContainersForNode = getNavigableContainersForNode;\nexports.isWithinOverflowContainer = isWithinOverflowContainer;\nexports.mayActivateContainer = mayActivateContainer;\nexports.notifyLeaveContainer = notifyLeaveContainer;\nexports.notifyLeaveContainerFail = notifyLeaveContainerFail;\nexports.notifyEnterContainer = notifyEnterContainer;\nexports.setContainerPreviousTarget = setContainerPreviousTarget;\nexports.setDefaultContainer = setDefaultContainer;\nexports.setLastContainer = setLastContainer;\nexports.setLastContainerFromTarget = setLastContainerFromTarget;\nexports.unmountContainer = unmountContainer;\nexports.rootContainerId = exports.removeContainer = exports.removeAllContainers = exports.isNavigable = exports.isContainer = exports.getSpottableDescendants = exports.getDeepSpottableDescendants = exports.getContainerId = exports.configureContainer = exports.configureDefaults = exports.containerAttribute = exports.addContainer = exports.isContainer5WayHoldable = exports.getContainerConfig = exports.getContainerNode = exports.getAllContainerIds = void 0;\n\nvar _and = _interopRequireDefault(require(\"ramda/src/and\"));\n\nvar _concat = _interopRequireDefault(require(\"ramda/src/concat\"));\n\nvar _util = require(\"@enact/core/util\");\n\nvar _intersection = _interopRequireDefault(require(\"ramda/src/intersection\"));\n\nvar _last = _interopRequireDefault(require(\"ramda/src/last\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar containerAttribute = 'data-spotlight-id';\nexports.containerAttribute = containerAttribute;\nvar containerConfigs = new Map();\nvar containerKey = 'spotlightId';\nvar disabledKey = 'spotlightContainerDisabled';\nvar containerPrefix = 'container-';\nvar containerSelector = '[data-spotlight-container]';\nvar rootContainerId = 'spotlightRootDecorator';\nexports.rootContainerId = rootContainerId;\nvar reverseDirections = {\n  'left': 'right',\n  'up': 'down',\n  'right': 'left',\n  'down': 'up'\n}; // Incrementer for container IDs\n\nvar _ids = 0;\nvar _defaultContainerId = '';\nvar _lastContainerId = ''; // Note: an <extSelector> can be one of following types:\n// - a valid selector string for \"querySelectorAll\"\n// - a NodeList or an array containing DOM elements\n// - a single DOM element\n// - a string \"@<containerId>\" to indicate the specified container\n// - a string \"@\" to indicate the default container\n\nvar GlobalConfig = {\n  // set to false for unmounted containers to omit them from searches\n  active: true,\n  continue5WayHold: false,\n  defaultElement: '',\n  // <extSelector> except \"@\" syntax.\n  enterTo: '',\n  // '', 'last-focused', 'default-element'\n  lastFocusedElement: null,\n  lastFocusedKey: null,\n  lastFocusedPersist: function lastFocusedPersist(node, all) {\n    var container = typeof node === 'string';\n    return {\n      container: container,\n      element: !container,\n      key: container ? node : all.indexOf(node)\n    };\n  },\n  lastFocusedRestore: function lastFocusedRestore(_ref, all) {\n    var container = _ref.container,\n        key = _ref.key;\n    return container ? key : all[key];\n  },\n  leaveFor: null,\n  // {left: <extSelector>, right: <extSelector>, up: <extSelector>, down: <extSelector>}\n  navigableFilter: null,\n  obliqueMultiplier: 5,\n  onEnterContainer: null,\n  // @private - notify the container when entering via 5-way\n  onLeaveContainer: null,\n  // @private - notify the container when leaving via 5-way\n  onLeaveContainerFail: null,\n  // @private - notify the container when failing to leave via 5-way\n  overflow: false,\n  partition: false,\n  // use the container bounds for partitioning when leaving\n  rememberSource: false,\n  restrict: 'self-first',\n  // 'self-first', 'self-only', 'none'\n  selector: '',\n  // can be a valid <extSelector> except \"@\" syntax.\n  selectorDisabled: false,\n  straightMultiplier: 1,\n  straightOnly: false,\n  straightOverlapThreshold: 0.5,\n  tabIndexIgnoreList: 'a, input, select, textarea, button, iframe, [contentEditable=true]'\n};\n/**\n * Calculates nodes within `node` that match `includeSelector` and do not match `excludeSelector`\n *\n * @param   {Node}    node             DOM Node to query\n * @param   {String}  includeSelector  CSS selector of nodes to include\n * @param   {String}  excludeSelector  CSS selector for nodes to exclude\n *\n * @returns {Node[]}                   Array of nodes\n * @memberof spotlight/container\n * @private\n */\n\nvar querySelector = function querySelector(node, includeSelector, excludeSelector) {\n  var include = Array.prototype.slice.call(node.querySelectorAll(includeSelector));\n  var exclude = node.querySelectorAll(excludeSelector);\n\n  for (var i = 0; i < exclude.length; i++) {\n    var index = include.indexOf(exclude.item(i));\n\n    if (index >= 0) {\n      include.splice(index, 1);\n    }\n  }\n\n  return include;\n};\n/**\n * Determines if `node` is a spotlight container\n *\n * @param   {Node}     node   Node to check\n *\n * @returns {Boolean}        `true` if `node` is a spotlight container\n * @memberof spotlight/container\n * @private\n */\n\n\nvar isContainerNode = function isContainerNode(node) {\n  return node && node.dataset && 'spotlightContainer' in node.dataset;\n};\n/**\n * Walks up the node hierarchy calling `fn` on each node that is a container\n *\n * @param   {Node}     node  Node from which to start the search\n * @param   {Function} fn    Called once for each container with the container node as the first\n *                           argument. The return value is accumulated in the array returned by\n *                           `mapContainers`\n *\n * @returns {Array}          Array of values returned by `fn` in order of outermost container to\n *                           innermost container\n * @memberof spotlight/container\n * @private\n */\n\n\nvar mapContainers = function mapContainers(node, fn) {\n  var result = [];\n\n  while (node && node !== document) {\n    if (isContainerNode(node)) {\n      result.unshift(fn(node));\n    }\n\n    node = node.parentNode;\n  }\n\n  return result;\n};\n/**\n * Returns the container config for `containerId`\n *\n * @param   {String}  id  Container ID\n *\n * @returns {Object}      Container config\n * @memberof spotlight/container\n * @private\n */\n\n\nvar getContainerConfig = function getContainerConfig(id) {\n  return containerConfigs.get(id);\n};\n/**\n * Determines if node or a container id represents a spotlight container\n *\n * @param   {Node|String}  nodeOrId  Node or container ID\n *\n * @returns {Boolean}                `true` if `nodeOrId` represents a spotlight container\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.getContainerConfig = getContainerConfig;\n\nvar isContainer = function isContainer(nodeOrId) {\n  if (typeof nodeOrId === 'string') {\n    return containerConfigs.has(nodeOrId);\n  }\n\n  return isContainerNode(nodeOrId);\n};\n/**\n * Determines if any of the containers at or above `node` are disabled and, if so, returns `false`.\n *\n * @param   {Node}     node  Spottable node or spotlight container\n *\n * @returns {Boolean}        `true` if all container ancestors are enabled\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.isContainer = isContainer;\n\nvar isContainerEnabled = function isContainerEnabled(node) {\n  return mapContainers(node, function (container) {\n    return container.dataset[disabledKey] !== 'true';\n  }).reduce(_and[\"default\"], true);\n};\n/**\n * Returns the container ID for `node`\n *\n * @param   {Node}    node  Container Node\n *\n * @returns {String}        Container ID\n * @memberof spotlight/container\n * @private\n */\n\n\nvar getContainerId = function getContainerId(node) {\n  return node.dataset[containerKey];\n};\n/**\n * Generates a CSS selector string for a current container if `node` is a container\n *\n * @param   {Node}    node  Container Node\n *\n * @returns {String}        CSS selector\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.getContainerId = getContainerId;\n\nvar getContainerSelector = function getContainerSelector(node) {\n  if (isContainerNode(node)) {\n    return \"[\".concat(containerAttribute, \"=\\\"\").concat(getContainerId(node), \"\\\"]\");\n  }\n\n  return '';\n};\n/**\n * Generates a CSS selector string for containers within `node` if it is a container\n *\n * @param   {Node}    node  Container Node\n *\n * @returns {String}        CSS selector\n * @memberof spotlight/container\n * @private\n */\n\n\nvar getSubContainerSelector = function getSubContainerSelector(node) {\n  if (isContainerNode(node)) {\n    return \"\".concat(getContainerSelector(node), \" \").concat(containerSelector);\n  }\n\n  return containerSelector;\n};\n/**\n * Returns the node for a container\n *\n * @param   {String}  containerId  ID of container\n *\n * @returns {Node}                 DOM node of the container\n * @memberof spotlight/container\n * @private\n */\n\n\nvar getContainerNode = function getContainerNode(containerId) {\n  if (!containerId) {\n    return null;\n  } else if (containerId === rootContainerId) {\n    return document;\n  }\n\n  return document.querySelector(\"[\".concat(containerAttribute, \"=\\\"\").concat(containerId, \"\\\"]\"));\n};\n/**\n * Calls the `navigableFilter` function for the container if defined.\n *\n * @param   {Node}    node         DOM node to check if it is navigable\n * @param   {String}  containerId  ID of container\n *\n * @returns {Boolean}              `true` if it passes the `navigableFilter` method or if that\n *                                  method is not defined for the container\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.getContainerNode = getContainerNode;\n\nvar navigableFilter = function navigableFilter(node, containerId) {\n  var config = getContainerConfig(containerId);\n\n  if (config && typeof config.navigableFilter === 'function') {\n    if (config.navigableFilter(node, containerId) === false) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Determines nodes that are owned by `node` based on `aria-owns`.\n *\n * @param   {Node}   node          Owner\n *\n * @returns {Node[]}               Array of owned nodes\n * @memberof spotlight/container\n * @private\n */\n\n\nvar getOwnedNodes = function getOwnedNodes(node, selector) {\n  // if node is document, it will not have getAttribute and therefore can't have aria-owns\n  var owns = node && node.getAttribute && node.getAttribute('aria-owns');\n\n  if (owns) {\n    var ids = owns.split(' ');\n    return ids.map(function (id) {\n      return id && document.getElementById(id);\n    }).filter(Boolean).filter(function (n) {\n      return isContainerNode(n) || (0, _utils.matchSelector)(selector, n);\n    });\n  }\n\n  return [];\n};\n/**\n * Determines all spottable elements and containers that are directly contained by the container\n * identified by `containerId` and no other subcontainers.\n *\n * @param   {String}  containerId  ID of container\n *\n * @returns {Node[]}               Array of spottable elements and containers.\n * @memberof spotlight/container\n * @public\n */\n\n\nvar getSpottableDescendants = function getSpottableDescendants(containerId) {\n  var node = getContainerNode(containerId); // if it's falsy or is a disabled container, return an empty set\n\n  if (!node || isContainerNode(node) && !isContainerEnabled(node)) {\n    return [];\n  }\n\n  var _ref2 = getContainerConfig(containerId) || {},\n      selector = _ref2.selector,\n      selectorDisabled = _ref2.selectorDisabled;\n\n  if (!selector || selectorDisabled) {\n    return [];\n  }\n\n  var spottableSelector = selector;\n  var subContainerSelector = getSubContainerSelector(node);\n  var candidates = querySelector(node, \"\".concat(spottableSelector, \", \").concat(getContainerSelector(node), \" \").concat(containerSelector, \":not([data-spotlight-container-disabled=\\\"true\\\"])\"), \"\".concat(subContainerSelector, \" \").concat(spottableSelector, \", \").concat(subContainerSelector, \" \").concat(containerSelector));\n  candidates.push.apply(candidates, _toConsumableArray(getOwnedNodes(node, selector)));\n  return candidates.filter(function (n) {\n    return navigableFilter(n, containerId);\n  });\n};\n/**\n * Recursively get spottable descendants by including elements within sub-containers that do not\n * have `enterTo` configured\n *\n * @param   {String}    containerId          ID of container\n * @param   {String[]}  [excludedContainers] IDs of containers to exclude from result set\n *\n * @returns {Node[]}                         Array of spottable elements and containers\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.getSpottableDescendants = getSpottableDescendants;\n\nvar getDeepSpottableDescendants = function getDeepSpottableDescendants(containerId, excludedContainers) {\n  return getSpottableDescendants(containerId).map(function (n) {\n    if (isContainer(n)) {\n      var id = getContainerId(n);\n      var config = getContainerConfig(id);\n\n      if (excludedContainers && excludedContainers.indexOf(id) >= 0) {\n        return [];\n      } else if (config && !config.enterTo) {\n        return getDeepSpottableDescendants(id, excludedContainers);\n      }\n    }\n\n    return [n];\n  }).reduce(_concat[\"default\"], []);\n};\n/**\n * Determines if a container allows 5-way key hold to be preserved or not.\n *\n * @param {String} containerId Container Id\n * @returns {Boolean} `true` if a container is 5 way holdable\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.getDeepSpottableDescendants = getDeepSpottableDescendants;\n\nvar isContainer5WayHoldable = function isContainer5WayHoldable(containerId) {\n  var config = getContainerConfig(containerId);\n  return config && config.continue5WayHold || false;\n};\n/**\n * Returns an array of ids for containers that wrap the element, in order of outer-to-inner, with\n * the last array item being the immediate container id of the element.\n *\n * @param   {Node}      node  Node from which to start the search\n *\n * @returns {String[]}        Array on container IDs\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.isContainer5WayHoldable = isContainer5WayHoldable;\n\nfunction getContainersForNode(node) {\n  var containers = mapContainers(node, getContainerId);\n  containers.unshift(rootContainerId);\n  return containers;\n}\n/**\n * Returns an array of ids for containers that wrap the element, in order of outer-to-inner, with\n * the last array item being the immediate container id of the element. The container ids are\n * limited to only those between `node` and the first restrict=\"self-only\" container.\n *\n * @param   {Node}      node  Node from which to start the search\n *\n * @returns {String[]}        Array on container IDs\n * @memberof spotlight/container\n * @private\n */\n\n\nfunction getNavigableContainersForNode(node) {\n  var containerIds = getContainersForNode(node); // find first self-only container id\n\n  var selfOnlyIndex = containerIds.map(getContainerConfig).filter(function (config) {\n    return config != null;\n  }).reduceRight(function (index, config, i) {\n    if (index === -1 && config.restrict === 'self-only') {\n      return i;\n    }\n\n    return index;\n  }, -1); // if we found one (and it's not the root), slice those off and return\n\n  if (selfOnlyIndex > 0) {\n    return containerIds.slice(selfOnlyIndex);\n  }\n\n  return containerIds;\n}\n/**\n * Generates a new unique identifier for a container\n *\n * @returns {String} Container ID\n * @memberof spotlight/container\n * @private\n */\n\n\nfunction generateId() {\n  var id;\n  /* eslint no-constant-condition: [\"error\", { \"checkLoops\": false }] */\n\n  while (true) {\n    id = containerPrefix + String(++_ids);\n\n    if (!isContainer(id)) {\n      break;\n    }\n  }\n\n  return id;\n}\n/**\n * Merges two container configurations while only allowing keys from `updated` which are defined in\n * `GlobalConfig`\n *\n * @param   {Object}  current  Current container configuration\n * @param   {Object}  updated  Updated configuration which may only be a partial configuration\n *\n * @returns {Object}           Merged configuration\n * @memberof spotlight/container\n * @private\n */\n\n\nvar mergeConfig = function mergeConfig(current, updated) {\n  if (!updated) return current;\n  var cfg = null;\n  Object.keys(updated).forEach(function (key) {\n    if (key in GlobalConfig && current[key] !== updated[key]) {\n      if (cfg == null) {\n        cfg = Object.assign({}, current);\n      }\n\n      cfg[key] = updated[key];\n    }\n  });\n  return cfg || current;\n};\n/**\n * Adds or updates a container. When a container id is not specified, it will be generated.\n *\n * @param   {String|Object}  containerIdOrConfig  Either a string container id or a configuration\n *                                                object.\n * @param   {Object}         [config]             Container configuration when `containerIdOrConfig`\n *                                                is a string. When omitted, the container will have\n *                                                the default `GlobalConfig`.\n *\n * @returns {String}                              The container id\n * @memberof spotlight/container\n * @public\n */\n\n\nvar configureContainer = function configureContainer() {\n  var containerId, config;\n\n  if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'object') {\n    config = arguments.length <= 0 ? undefined : arguments[0];\n    containerId = config.id;\n  } else if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n    containerId = arguments.length <= 0 ? undefined : arguments[0];\n\n    if (typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'object') {\n      config = arguments.length <= 1 ? undefined : arguments[1];\n    }\n  }\n\n  if (!containerId) {\n    containerId = generateId();\n  }\n\n  config = mergeConfig(containerConfigs.get(containerId) || _objectSpread({}, GlobalConfig), config);\n  containerConfigs.set(containerId, config);\n  return containerId;\n};\n/**\n * Adds a container and marks it active. When a container id is not specified, it will be generated.\n *\n * @param   {String|Object}  containerIdOrConfig  Either a string container id or a configuration\n *                                                object.\n * @param   {Object}         [config]             Container configuration when `containerIdOrConfig`\n *                                                is a string. When omitted, the container will have\n *                                                the default `GlobalConfig`.\n *\n * @returns {String}                              The container id\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.configureContainer = configureContainer;\n\nvar addContainer = function addContainer() {\n  var containerId = configureContainer.apply(void 0, arguments);\n  var config = getContainerConfig(containerId);\n  config.active = true;\n  return containerId;\n};\n/**\n * Removes a container\n *\n * @param   {String}     containerId  ID of the container to remove\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.addContainer = addContainer;\n\nvar removeContainer = function removeContainer(containerId) {\n  containerConfigs[\"delete\"](containerId);\n};\n/**\n * Removes all containers\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.removeContainer = removeContainer;\n\nvar removeAllContainers = function removeAllContainers() {\n  containerConfigs.clear();\n};\n/**\n * Configures the `GlobalConfig` for containers\n *\n * @param   {Object}  config  New global configuration. Cannot introduce new keys\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.removeAllContainers = removeAllContainers;\n\nvar configureDefaults = function configureDefaults(config) {\n  GlobalConfig = mergeConfig(GlobalConfig, config);\n};\n/**\n * Determines if `node` is a navigable element within the container identified by `containerId`.\n *\n * @param   {Node}     node         DOM node to check if it is navigable\n * @param   {String}   containerId  ID of the container containing `node`\n * @param   {Boolean}  verify       `true` to verify the node matches the container's `selector`\n *\n * @returns {Boolean}               `true` if `node` is navigable\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.configureDefaults = configureDefaults;\n\nvar isNavigable = function isNavigable(node, containerId, verify) {\n  if (!node || // jsdom reports all nodes as having no size so we must skip this condition in our tests\n  process.env.NODE_ENV !== 'test' && node.offsetWidth <= 0 && node.offsetHeight <= 0) {\n    return false;\n  }\n\n  var containerNode = getContainerNode(containerId);\n\n  if (containerNode !== document && containerNode.dataset[disabledKey] === 'true') {\n    return false;\n  }\n\n  var config = getContainerConfig(containerId);\n\n  if (verify && config && config.selector && !isContainer(node) && !(0, _utils.matchSelector)(config.selector, node)) {\n    return false;\n  }\n\n  return navigableFilter(node, containerId);\n};\n/**\n * Returns the IDs of all containers\n *\n * @returns {String[]}  Array of container IDs\n * @memberof spotlight/container\n * @private\n */\n\n\nexports.isNavigable = isNavigable;\n\nvar getAllContainerIds = function getAllContainerIds() {\n  var ids = [];\n  var keys = containerConfigs.keys(); // PhantomJS-friendly iterator->array conversion\n\n  var id;\n\n  while ((id = keys.next()) && !id.done) {\n    if (isActiveContainer(id.value)) {\n      ids.push(id.value);\n    }\n  }\n\n  return ids;\n};\n/**\n * Returns the default focus element for a container\n *\n * @param   {String}                             containerId        ID of container\n * @param   {('last-focused'|'default-element')} [preferredEnterTo] Prefer the given enterTo\n *                                                                  configuration\n *\n * @returns {Node|null}                 Default focus element\n * @memberof spotlight/container\n * @public\n */\n\n\nexports.getAllContainerIds = getAllContainerIds;\n\nfunction getContainerDefaultElement(containerId, preferredEnterTo) {\n  var config = getContainerConfig(containerId);\n  var defaultElementSelector = config && config.defaultElement;\n\n  if (!defaultElementSelector) {\n    return null;\n  }\n\n  defaultElementSelector = (0, _util.coerceArray)(defaultElementSelector); // If a preferred enterTo has been provided, we will favor it by making it first in search array\n\n  if (preferredEnterTo && typeof preferredEnterTo === 'string' && preferredEnterTo !== 'default-element') {\n    defaultElementSelector.unshift(preferredEnterTo);\n  }\n\n  var spottables = getDeepSpottableDescendants(containerId);\n  return defaultElementSelector.reduce(function (result, selector) {\n    if (result) {\n      return result;\n    }\n\n    if (typeof selector === 'string') {\n      return spottables.filter(function (elem) {\n        return (0, _utils.matchSelector)(selector, elem) && isNavigable(elem, containerId, true);\n      })[0];\n    } // FIXME: There is some prior implicit support for `defaultElement` to be an element rather\n    // than a selector. This continues that support but should eventually be removed.\n\n\n    return selector;\n  }, null);\n}\n/**\n * Gets the element last focused within the container.\n *\n * @param   {String}       containerId  ID of container\n *\n * @returns {Node|String|null}               DOM Node last focused\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction getContainerLastFocusedElement(containerId) {\n  var config = getContainerConfig(containerId);\n\n  if (!config || !config.lastFocusedElement) {\n    return null;\n  } // lastFocusedElement may be a container ID so try to convert it to a node to test navigability\n\n\n  var lastFocusedElement = config.lastFocusedElement;\n  var node = lastFocusedElement;\n\n  if (typeof node === 'string') {\n    node = getContainerNode(lastFocusedElement);\n  }\n\n  return isNavigable(node, containerId, true) ? lastFocusedElement : null;\n}\n/**\n * Sets the element last focused within the container\n *\n * @param   {Node}      node         DOM node last focused\n * @param   {String[]}  containerId  ID of container\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction setContainerLastFocusedElement(node, containerIds) {\n  var lastFocusedElement = node;\n\n  for (var i = containerIds.length - 1; i > -1; i--) {\n    var id = containerIds[i];\n    configureContainer(id, {\n      lastFocusedElement: lastFocusedElement\n    }); // If any container in the stack is controlling entering focus, use its container id as the\n    // lastFocusedElement instead of the node\n\n    var config = getContainerConfig(id);\n\n    if (config.enterTo) {\n      lastFocusedElement = id;\n    }\n  }\n}\n/**\n * Returns all navigable nodes (spottable nodes or containers) visible from outside the container.\n * If the container is restricting navigation into itself via `enterTo`, this method will attempt to\n * return that element as the only element in an array. If that fails or if navigation is not\n * restricted, it will return an array of all possible navigable nodes.\n *\n * @param   {String}                             containerId        Container ID\n * @param   {('last-focused'|'default-element')} [preferredEnterTo] Prefer the given enterTo\n *                                                                  configuration\n *\n * @returns {Node[]}             Navigable elements within container\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction getContainerNavigableElements(containerId, preferredEnterTo) {\n  if (!isContainer(containerId)) {\n    return [];\n  }\n\n  var config = getContainerConfig(containerId);\n  var enterTo = config.enterTo,\n      overflow = config.overflow;\n  var enterLast = preferredEnterTo === 'last-focused' || enterTo === 'last-focused' && !preferredEnterTo;\n  var next; // if the container has a preferred entry point, try to find it first\n\n  if (enterLast) {\n    next = getContainerLastFocusedElement(containerId);\n  } // try default element if last focused can't be focused\n\n\n  if (!next) {\n    next = getContainerDefaultElement(containerId, preferredEnterTo);\n  }\n\n  if (!next) {\n    var spottables = overflow ? // overflow requires deep recursion to handle selecting the children of unrestricted\n    // containers or restricted containers larger than the container\n    getDeepSpottableDescendants(containerId) : getSpottableDescendants(containerId); // if there isn't a preferred entry on an overflow container, filter the visible elements\n\n    if (overflow) {\n      var containerRect = (0, _utils.getContainerRect)(containerId);\n      next = containerRect && spottables.filter(function (element) {\n        var elementRect = (0, _utils.getRect)(element);\n\n        if (isContainer(element)) {\n          return (0, _utils.intersects)(containerRect, elementRect);\n        }\n\n        return (0, _utils.contains)(containerRect, (0, _utils.getRect)(element));\n      });\n    } // otherwise, return all spottables within the container\n\n\n    if (!next) {\n      next = spottables;\n    }\n  }\n\n  return next ? (0, _util.coerceArray)(next) : [];\n}\n/**\n * Determines the preferred focus target, traversing any sub-containers as necessary, for the given\n * container.\n *\n * @param   {String}                             containerId        ID of container\n * @param   {('last-focused'|'default-element')} [preferredEnterTo] Prefer the given enterTo\n *                                                                  configuration\n *\n * @returns {Node}                 Preferred target as either a DOM node or container-id\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction getContainerFocusTarget(containerId, preferredEnterTo) {\n  // deferring restoration until it's requested to allow containers to prepare first\n  restoreLastFocusedElement(containerId);\n  var next = getContainerNavigableElements(containerId, preferredEnterTo); // If multiple candidates returned, we need to find the first viable target since some may\n  // be empty containers which should be skipped.\n\n  return next.reduce(function (result, element) {\n    if (result) {\n      return result;\n    } else if (isContainer(element)) {\n      var nextId = isContainerNode(element) ? getContainerId(element) : element;\n      return getContainerFocusTarget(nextId);\n    }\n\n    return element;\n  }, null) || null;\n}\n\nfunction getContainerPreviousTarget(containerId, direction, destination) {\n  var config = getContainerConfig(containerId);\n\n  if (config && config.rememberSource && config.previous && config.previous.reverse === direction && config.previous.destination === destination) {\n    return config.previous.target;\n  }\n}\n\nfunction setContainerPreviousTarget(containerId, direction, destination, target) {\n  var config = getContainerConfig(containerId);\n\n  if (config && config.rememberSource) {\n    configureContainer(containerId, {\n      previous: {\n        target: target,\n        destination: destination,\n        reverse: reverseDirections[direction]\n      }\n    });\n  }\n}\n/**\n * Saves the last focused element into `lastFocusedKey` using a container-defined serialization\n * method configured in `lastFocusedPersist`.\n *\n * @param   {String}     containerId  ID of container\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction persistLastFocusedElement(containerId) {\n  var cfg = getContainerConfig(containerId);\n\n  if (cfg) {\n    var lastFocusedElement = cfg.lastFocusedElement;\n\n    if (lastFocusedElement) {\n      var all = getDeepSpottableDescendants(containerId);\n      var lastFocusedKey = cfg.lastFocusedPersist(lastFocusedElement, all); // store lastFocusedKey and release node reference to lastFocusedElement\n\n      cfg.lastFocusedKey = lastFocusedKey;\n      cfg.lastFocusedElement = null;\n    }\n  }\n}\n/**\n * Restores the last focused element from `lastFocusedKey` using a container-defined deserialization\n * method configured in `lastFocusedRestore`.\n *\n * @param   {String}     containerId  ID of container\n *\n * @returns {undefined}\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction restoreLastFocusedElement(containerId) {\n  var cfg = getContainerConfig(containerId);\n\n  if (cfg && cfg.lastFocusedKey) {\n    var all = getDeepSpottableDescendants(containerId);\n    var lastFocusedElement = cfg.lastFocusedRestore(cfg.lastFocusedKey, all); // restore lastFocusedElement and release lastFocusedKey\n\n    cfg.lastFocusedKey = null;\n    cfg.lastFocusedElement = lastFocusedElement;\n  }\n}\n\nfunction unmountContainer(containerId) {\n  var config = getContainerConfig(containerId);\n\n  if (config) {\n    config.active = false;\n    persistLastFocusedElement(containerId);\n\n    if (typeof config.defaultElement !== 'string') {\n      config.defaultElement = null;\n    }\n  }\n}\n\nfunction isActiveContainer(containerId) {\n  var config = getContainerConfig(containerId);\n  return config && config.active;\n}\n/**\n * Determines if the provided container has a configured restriction.\n *\n * By default, returns `true` for `'self-only'` restrictions but the type of restriction can be\n * passed as well.\n *\n * @param {String} containerId The container id\n * @param {String} [restrict] The container restriction defaulted to `'self-only'`\n * @returns {Boolean} `true` if the container has the specified restriction\n * @private\n */\n\n\nfunction isRestrictedContainer(containerId) {\n  var restrict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'self-only';\n  var config = getContainerConfig(containerId);\n  return Boolean(config && config.restrict === restrict);\n}\n/**\n * Determines if `innerContainerId` is inside `outerContainerId`.\n *\n * @param {String} outerContainerId The outer container id\n * @param {String} innerContainerId The inner container id\n * @returns {Boolean} `true` if both containers exist and `innerContainerId` is within\n *                    `outerContainerId`\n * @private\n */\n\n\nfunction containsContainer(outerContainerId, innerContainerId) {\n  var outer = getContainerNode(outerContainerId);\n  var inner = getContainerNode(innerContainerId);\n  return Boolean(outer && inner && outer.contains(inner));\n}\n/**\n * Determines if `containerId` may become the active container.\n *\n * @param {String} containerId Spotlight container to which focus is leaving\n * @returns\t{Boolean} `true` if the active container can change to `containerId`\n * @private\n */\n\n\nfunction mayActivateContainer(containerId) {\n  var currentContainerId = getLastContainer(); // If the current container is restricted to 'self-only' and if the next container to be\n  // activated is not inside the currently activated container, the next container should not be\n  // activated.\n\n  return !isRestrictedContainer(currentContainerId) || containsContainer(currentContainerId, containerId);\n}\n\nfunction getDefaultContainer() {\n  return isActiveContainer(_defaultContainerId) ? _defaultContainerId : '';\n}\n\nfunction setDefaultContainer(containerId) {\n  if (!containerId) {\n    _defaultContainerId = '';\n  } else if (!getContainerConfig(containerId)) {\n    throw new Error('Container \"' + containerId + '\" doesn\\'t exist!');\n  } else {\n    _defaultContainerId = containerId;\n  }\n}\n\nfunction getLastContainer() {\n  return isActiveContainer(_lastContainerId) ? _lastContainerId : '';\n}\n\nfunction setLastContainer(containerId) {\n  _lastContainerId = containerId || '';\n}\n/**\n * Updates the last container based on the current focus and target focus.\n *\n * @param {Node} current Currently focused node\n * @param {Node} target  Target node. May or may not be focusable\n * @memberof spotlight/container\n * @public\n */\n\n\nfunction setLastContainerFromTarget(current, target) {\n  var currentContainers = getNavigableContainersForNode(current);\n  var currentOuterContainerId = currentContainers[0];\n  var currentContainerConfig = getContainerConfig(currentOuterContainerId);\n  var targetContainers = getContainersForNode(target);\n  var targetInnerContainer = (0, _last[\"default\"])(targetContainers);\n  var sharedContainer = (0, _last[\"default\"])((0, _intersection[\"default\"])(currentContainers, targetContainers));\n\n  if (sharedContainer || !currentContainerConfig || currentContainerConfig.restrict !== 'self-only') {\n    // If the target shares a container with the current container stack or the current\n    // element isn't within a self-only container, use the target's nearest container\n    setLastContainer(targetInnerContainer);\n  } else {\n    // Otherwise, the target is not within the current container stack and the current\n    // element was within a 'self-only' container, use the current's outer container\n    setLastContainer(currentOuterContainerId);\n  }\n}\n\nfunction isWithinOverflowContainer(target) {\n  var containerIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getContainersForNode(target);\n  return containerIds // ignore the root container id which is set to overflow by the root decorator\n  .filter(function (id) {\n    return id !== rootContainerId;\n  }) // get the config for each container\n  .map(getContainerConfig) // and check if any are set to overflow\n  .some(function (config) {\n    return config && config.overflow;\n  });\n}\n/**\n * Notifies any affected containers that focus has left one of their children for another container\n *\n * @param {String} direction up/down/left/right\n * @param {Node} current currently focused element\n * @param {String[]} currentContainerIds Containers for current\n * @param {Node} next To be focused element\n * @param {String[]} nextContainerIds Containers for next\n * @private\n */\n\n\nfunction notifyLeaveContainer(direction, current, currentContainerIds, next, nextContainerIds) {\n  currentContainerIds.forEach(function (containerId) {\n    if (!nextContainerIds.includes(containerId)) {\n      var config = getContainerConfig(containerId);\n\n      if (config && config.onLeaveContainer) {\n        config.onLeaveContainer({\n          type: 'onLeaveContainer',\n          direction: direction,\n          target: current,\n          relatedTarget: next\n        });\n      }\n    }\n  });\n}\n/**\n * Notifies any containers that focus attempted to move but failed to find a target\n *\n * @param {String} direction up/down/left/right\n * @param {Node} current currently focused element\n * @param {String[]} currentContainerIds Containers for current\n * @private\n */\n\n\nfunction notifyLeaveContainerFail(direction, current, currentContainerIds) {\n  currentContainerIds.forEach(function (containerId) {\n    var config = getContainerConfig(containerId);\n\n    if (config && config.onLeaveContainerFail) {\n      config.onLeaveContainerFail({\n        type: 'onLeaveContainerFail',\n        direction: direction,\n        target: current\n      });\n    }\n  });\n}\n/**\n * Notifies any affected containers that one of their children has received focus.\n *\n * @param {String} direction up/down/left/right\n * @param {Node} previous Previously focused element\n * @param {String[]} previousContainerIds Containers for previous\n * @param {Node} current Currently focused element\n * @param {String[]} currentContainerIds Containers for current\n * @private\n */\n\n\nfunction notifyEnterContainer(direction, previous, previousContainerIds, current, currentContainerIds) {\n  currentContainerIds.forEach(function (containerId) {\n    if (!previousContainerIds.includes(containerId)) {\n      var config = getContainerConfig(containerId);\n\n      if (config && config.onEnterContainer) {\n        config.onEnterContainer({\n          type: 'onEnterContainer',\n          direction: direction,\n          target: current,\n          relatedTarget: previous\n        });\n      }\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}