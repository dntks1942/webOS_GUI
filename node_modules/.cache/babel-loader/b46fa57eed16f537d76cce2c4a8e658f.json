{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlwaysViewingPanels = exports[\"default\"] = void 0;\n\nvar _resolution = require(\"@enact/ui/resolution\");\n\nvar _Slottable = _interopRequireDefault(require(\"@enact/ui/Slottable\"));\n\nvar _Measurable = _interopRequireDefault(require(\"@enact/ui/Measurable\"));\n\nvar _compose = _interopRequireDefault(require(\"ramda/src/compose\"));\n\nvar _Skinnable = _interopRequireDefault(require(\"../Skinnable\"));\n\nvar _Arrangers = require(\"./Arrangers\");\n\nvar _Breadcrumb = require(\"./Breadcrumb\");\n\nvar _BreadcrumbDecorator = _interopRequireDefault(require(\"./BreadcrumbDecorator\"));\n\nvar _Viewport = _interopRequireDefault(require(\"./Viewport\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/*\n * Calculates the number of breadcrumbs that would fit in half of the viewport\n *\n * @param {Number} viewportWidth inner width of the viewport (usually the window)\n * @param {Number} width         width of a breadcrumb\n *\n * @returns {Number} Number of breadcrumbs that can completely fit in that space\n * @private\n */\n\n\nvar calcMax = function calcMax() {\n  if (typeof window === 'object') {\n    return Math.floor(window.innerWidth / 2 / (0, _resolution.scale)(_Breadcrumb.breadcrumbWidth));\n  }\n};\n\nvar AlwaysViewingPanelsDecorator = (0, _compose[\"default\"])((0, _Slottable[\"default\"])({\n  slots: ['controls']\n}), (0, _Measurable[\"default\"])({\n  refProp: 'controlsRef',\n  measurementProp: 'controlsMeasurements'\n}), _Skinnable[\"default\"], (0, _BreadcrumbDecorator[\"default\"])({\n  className: 'panels alwaysViewing enact-fit',\n  max: calcMax,\n  panelArranger: _Arrangers.AlwaysViewingArranger\n}));\n/**\n * An instance of [`Panels`]{@link moonstone/Panels.Panels} which restricts the `Panel` to the right\n * half of the screen with the left half used for breadcrumbs that allow navigating to previous\n * panels. Typically used for overlaying panels over a screen.\n *\n * @class AlwaysViewingPanels\n * @memberof moonstone/Panels\n * @ui\n * @public\n */\n\nvar AlwaysViewingPanels = AlwaysViewingPanelsDecorator(_Viewport[\"default\"]);\nexports.AlwaysViewingPanels = AlwaysViewingPanels;\nvar _default = AlwaysViewingPanels;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/sonjaeseong/workspace/webOS/CARROT/webOS_GUI/node_modules/@enact/moonstone/Panels/AlwaysViewingPanels.js"],"names":["Object","defineProperty","exports","value","AlwaysViewingPanels","_resolution","require","_Slottable","_interopRequireDefault","_Measurable","_compose","_Skinnable","_Arrangers","_Breadcrumb","_BreadcrumbDecorator","_Viewport","obj","__esModule","calcMax","window","Math","floor","innerWidth","scale","breadcrumbWidth","AlwaysViewingPanelsDecorator","slots","refProp","measurementProp","className","max","panelArranger","AlwaysViewingArranger","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAAxD;;AAEA,IAAIG,WAAW,GAAGC,OAAO,CAAC,sBAAD,CAAzB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACF,OAAO,CAAC,qBAAD,CAAR,CAAvC;;AAEA,IAAIG,WAAW,GAAGD,sBAAsB,CAACF,OAAO,CAAC,sBAAD,CAAR,CAAxC;;AAEA,IAAII,QAAQ,GAAGF,sBAAsB,CAACF,OAAO,CAAC,mBAAD,CAAR,CAArC;;AAEA,IAAIK,UAAU,GAAGH,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAvC;;AAEA,IAAIM,UAAU,GAAGN,OAAO,CAAC,aAAD,CAAxB;;AAEA,IAAIO,WAAW,GAAGP,OAAO,CAAC,cAAD,CAAzB;;AAEA,IAAIQ,oBAAoB,GAAGN,sBAAsB,CAACF,OAAO,CAAC,uBAAD,CAAR,CAAjD;;AAEA,IAAIS,SAAS,GAAGP,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,SAASE,sBAAT,CAAgCQ,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;AAEjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,OAAO,GAAG,SAASA,OAAT,GAAmB;AAC/B,MAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOC,IAAI,CAACC,KAAL,CAAWF,MAAM,CAACG,UAAP,GAAoB,CAApB,GAAwB,CAAC,GAAGjB,WAAW,CAACkB,KAAhB,EAAuBV,WAAW,CAACW,eAAnC,CAAnC,CAAP;AACD;AACF,CAJD;;AAMA,IAAIC,4BAA4B,GAAG,CAAC,GAAGf,QAAQ,CAAC,SAAD,CAAZ,EAAyB,CAAC,GAAGH,UAAU,CAAC,SAAD,CAAd,EAA2B;AACrFmB,EAAAA,KAAK,EAAE,CAAC,UAAD;AAD8E,CAA3B,CAAzB,EAE/B,CAAC,GAAGjB,WAAW,CAAC,SAAD,CAAf,EAA4B;AAC9BkB,EAAAA,OAAO,EAAE,aADqB;AAE9BC,EAAAA,eAAe,EAAE;AAFa,CAA5B,CAF+B,EAK/BjB,UAAU,CAAC,SAAD,CALqB,EAKR,CAAC,GAAGG,oBAAoB,CAAC,SAAD,CAAxB,EAAqC;AAC9De,EAAAA,SAAS,EAAE,gCADmD;AAE9DC,EAAAA,GAAG,EAAEZ,OAFyD;AAG9Da,EAAAA,aAAa,EAAEnB,UAAU,CAACoB;AAHoC,CAArC,CALQ,CAAnC;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI5B,mBAAmB,GAAGqB,4BAA4B,CAACV,SAAS,CAAC,SAAD,CAAV,CAAtD;AACAb,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;AACA,IAAI6B,QAAQ,GAAG7B,mBAAf;AACAF,OAAO,CAAC,SAAD,CAAP,GAAqB+B,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlwaysViewingPanels = exports[\"default\"] = void 0;\n\nvar _resolution = require(\"@enact/ui/resolution\");\n\nvar _Slottable = _interopRequireDefault(require(\"@enact/ui/Slottable\"));\n\nvar _Measurable = _interopRequireDefault(require(\"@enact/ui/Measurable\"));\n\nvar _compose = _interopRequireDefault(require(\"ramda/src/compose\"));\n\nvar _Skinnable = _interopRequireDefault(require(\"../Skinnable\"));\n\nvar _Arrangers = require(\"./Arrangers\");\n\nvar _Breadcrumb = require(\"./Breadcrumb\");\n\nvar _BreadcrumbDecorator = _interopRequireDefault(require(\"./BreadcrumbDecorator\"));\n\nvar _Viewport = _interopRequireDefault(require(\"./Viewport\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*\n * Calculates the number of breadcrumbs that would fit in half of the viewport\n *\n * @param {Number} viewportWidth inner width of the viewport (usually the window)\n * @param {Number} width         width of a breadcrumb\n *\n * @returns {Number} Number of breadcrumbs that can completely fit in that space\n * @private\n */\nvar calcMax = function calcMax() {\n  if (typeof window === 'object') {\n    return Math.floor(window.innerWidth / 2 / (0, _resolution.scale)(_Breadcrumb.breadcrumbWidth));\n  }\n};\n\nvar AlwaysViewingPanelsDecorator = (0, _compose[\"default\"])((0, _Slottable[\"default\"])({\n  slots: ['controls']\n}), (0, _Measurable[\"default\"])({\n  refProp: 'controlsRef',\n  measurementProp: 'controlsMeasurements'\n}), _Skinnable[\"default\"], (0, _BreadcrumbDecorator[\"default\"])({\n  className: 'panels alwaysViewing enact-fit',\n  max: calcMax,\n  panelArranger: _Arrangers.AlwaysViewingArranger\n}));\n/**\n * An instance of [`Panels`]{@link moonstone/Panels.Panels} which restricts the `Panel` to the right\n * half of the screen with the left half used for breadcrumbs that allow navigating to previous\n * panels. Typically used for overlaying panels over a screen.\n *\n * @class AlwaysViewingPanels\n * @memberof moonstone/Panels\n * @ui\n * @public\n */\n\nvar AlwaysViewingPanels = AlwaysViewingPanelsDecorator(_Viewport[\"default\"]);\nexports.AlwaysViewingPanels = AlwaysViewingPanels;\nvar _default = AlwaysViewingPanels;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}