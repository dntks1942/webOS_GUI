{"ast":null,"code":"\"use strict\";\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar fontMap = {};\nvar currentLocale = null; // Generate a single font-face rule\n\nvar buildFont = function buildFont(config) {\n  if (!config && !config.name) {\n    return '';\n  }\n\n  var strOut = '@font-face { \\n' + \"  font-family: \\\"\".concat(config.name, \"\\\";\\n\");\n\n  if (config.weight) {\n    strOut += \"  font-weight: \".concat(config.weight, \";\\n\");\n  }\n\n  if (config.localName) {\n    // Accept a string or an array. If it's a string convert it into an array\n    if (typeof config.localName === 'string') {\n      config.localName = [config.localName];\n    } // Take our array and update each of its elements to be CSS \"local()\" strings\n\n\n    config.localName = config.localName.map(function (f) {\n      return \"local(\\\"\".concat(f, \"\\\")\");\n    }); // Join all our strings together with a comma, so it's a valid CSS `src` rule\n\n    strOut += \"  src: \".concat(config.localName.join(', '), \";\\n\");\n  }\n\n  if (config.unicodeRange) {\n    strOut += \"  unicode-range: \".concat(config.unicodeRange, \";\\n\");\n  }\n\n  strOut += '} \\n';\n  return strOut;\n}; // Generate a collection of font-face rules, in multiple font-variants\n\n\nvar buildFontSet = function buildFontSet(fontName, fonts, strLang, bitDefault) {\n  var strOut = '',\n      name = bitDefault ? fontName : fontName + ' ' + strLang;\n\n  if (fonts[strLang].regular) {\n    // Build Regular\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].regular,\n      unicodeRange: fonts[strLang].unicodeRange\n    }); // Build Light\n\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].light || fonts[strLang].regular,\n      weight: 300,\n      unicodeRange: fonts[strLang].unicodeRange\n    }); // Build SemiBold\n\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].semibold || fonts[strLang].bold || fonts[strLang].regular,\n      weight: 600,\n      unicodeRange: fonts[strLang].unicodeRange\n    }); // Build Bold\n\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].bold || fonts[strLang].regular,\n      weight: 700,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n  }\n\n  return strOut;\n};\n\nvar buildFontDefinitionCss = function buildFontDefinitionCss(locale, buildOverrides) {\n  var matchLang = locale.match(/\\b([a-z]{2})\\b/),\n      language = matchLang && matchLang[1],\n      matchScript = locale.match(/\\b([a-z]{4})\\b/i),\n      script = matchScript && matchScript[1],\n      matchReg = locale.match(/\\b([A-Z]{2}|[0-9]{3})\\b/),\n      region = matchReg && matchReg[1];\n  var fontDefinitionCss = ''; // Build all the fonts so they could be explicitly called\n\n  for (var fontName in fontMap) {\n    var fonts = fontMap[fontName];\n\n    for (var lang in fonts) {\n      if (!buildOverrides) {\n        fontDefinitionCss += buildFontSet(fontName, fonts, lang);\n      } else {\n        // Set up the override for locale-specific font.\n        // la = language, sc = script, re = region; `la-RE` or `zh-Hans-HK`\n        var _lang$split = lang.split('-'),\n            _lang$split2 = _slicedToArray(_lang$split, 3),\n            la = _lang$split2[0],\n            sc = _lang$split2[1],\n            re = _lang$split2[2]; // if script is not specified, fall back to second part representing region\n\n\n        if (!re && sc && sc.length === 2) {\n          re = sc;\n          sc = null;\n        }\n\n        var matchesRegion = re ? re === region : true;\n        var matchesScript = sc ? sc === script : true;\n\n        if (la === language && matchesRegion && matchesScript) {\n          fontDefinitionCss += buildFontSet(fontName, fonts, lang, true);\n        }\n      }\n    }\n  }\n\n  return fontDefinitionCss;\n};\n\nvar insertFontDefinitionCss = function insertFontDefinitionCss(styleId, fontDefinitionCss) {\n  if (typeof document !== 'undefined') {\n    // Normal execution in a browser window\n    var styleElem = document.getElementById(styleId);\n\n    if (!styleElem) {\n      styleElem = document.createElement('style');\n      styleElem.setAttribute('id', styleId);\n      styleElem.setAttribute('type', 'text/css');\n      document.head.appendChild(styleElem);\n    }\n\n    styleElem.innerHTML = fontDefinitionCss;\n  } else {\n    var tag = \"<style type=\\\"text/css\\\" id=\\\"\".concat(styleId, \"\\\">\").concat(fontDefinitionCss, \"</style>\"); // We're rendering without the DOM; return the font definition stylesheet element string.\n\n    return tag;\n  }\n};\n\nfunction fontGenerator(locale) {\n  var styleId = 'localized-fonts';\n\n  if (typeof document !== 'undefined' && document.getElementById(styleId)) {\n    return;\n  }\n\n  return insertFontDefinitionCss(styleId, buildFontDefinitionCss(locale));\n}\n\nfunction fontOverrideGenerator(locale) {\n  return insertFontDefinitionCss('localized-fonts-override', buildFontDefinitionCss(locale, true));\n}\n/**\n * Generates locale-specific font rules allowing any locale to have its own custom font. Each\n * locale-font from the configuration block (defined in this file) is generated at run-time. If the\n * locale you're currently in is in the locale-font list an additional `@font-face` rule will be\n * generated that will override the standard font.\n *\n * In addition to the standard override-font being generated, named region-specific fonts are also\n * generated. This lets you incorporate language specific fonts when you're outside of one of those\n * regions; useful in a language list context where you want the name of each language to be\n * represented by that language's designated font.\n *\n * Below is example genarated-output of the Urdu (\"ur\") locale-font.\n *\n * ```css\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur';\n * \tfont-weight: 500;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Bold';\n * \tfont-weight: 700;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Light';\n * \tfont-weight: 300;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * ```\n *\n * @param {String} locale Locale string in the format\n * @returns {String} An HTML fragment of the `<style>` when prerendering\n *\n * @public\n */\n\n\nfunction generateFontRules(locale) {\n  if (!locale || locale === currentLocale) {\n    return;\n  }\n\n  currentLocale = locale;\n  return fontGenerator(locale);\n}\n\nfunction generateFontOverrideRules(locale) {\n  if (!locale) {\n    return;\n  }\n\n  return fontOverrideGenerator(locale);\n}\n/**\n * Adds a localed font to the font map\n *\n * ```\n * addLocalizedFont('My Theme Font', {\n *   'ur': {\n *      regular: 'My Theme Urdu',\n *      unicodeRange:\n *        'U+600-6FF,' +\n *        'U+FE70-FEFE,' +\n *        'U+FB50-FDFF'\n *    }\n * })\n * ```\n *\n * @param {String} name  Name of the font\n * @param {Object} fonts Object mapping font names and unicode ranges to locales\n *\n * @public\n */\n\n\nfunction addLocalizedFont(name, fonts) {\n  fontMap[name] = fonts;\n\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\n/**\n * Removes a localized font from the font map\n *\n * @param   {String} name Name of the font\n *\n * @public\n */\n\n\nfunction removeLocalizedFont(name) {\n  delete fontMap[name];\n\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\n\nmodule.exports = generateFontRules;\nmodule.exports.generateFontRules = generateFontRules;\nmodule.exports.generateFontOverrideRules = generateFontOverrideRules;\nmodule.exports.addLocalizedFont = addLocalizedFont;\nmodule.exports.removeLocalizedFont = removeLocalizedFont;","map":{"version":3,"sources":["/Users/sonjaeseong/workspace/webOS/CARROT/webOS_GUI/node_modules/@enact/ui/internal/localized-fonts/localized-fonts.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","Symbol","iterator","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","err","isArray","fontMap","currentLocale","buildFont","config","strOut","concat","weight","localName","map","f","join","unicodeRange","buildFontSet","fontName","fonts","strLang","bitDefault","regular","light","semibold","bold","buildFontDefinitionCss","locale","buildOverrides","matchLang","match","language","matchScript","script","matchReg","region","fontDefinitionCss","lang","_lang$split","split","_lang$split2","la","sc","re","matchesRegion","matchesScript","insertFontDefinitionCss","styleId","document","styleElem","getElementById","createElement","setAttribute","head","appendChild","innerHTML","tag","fontGenerator","fontOverrideGenerator","generateFontRules","generateFontOverrideRules","addLocalizedFont","removeLocalizedFont","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar fontMap = {};\nvar currentLocale = null; // Generate a single font-face rule\n\nvar buildFont = function buildFont(config) {\n  if (!config && !config.name) {\n    return '';\n  }\n\n  var strOut = '@font-face { \\n' + \"  font-family: \\\"\".concat(config.name, \"\\\";\\n\");\n\n  if (config.weight) {\n    strOut += \"  font-weight: \".concat(config.weight, \";\\n\");\n  }\n\n  if (config.localName) {\n    // Accept a string or an array. If it's a string convert it into an array\n    if (typeof config.localName === 'string') {\n      config.localName = [config.localName];\n    } // Take our array and update each of its elements to be CSS \"local()\" strings\n\n\n    config.localName = config.localName.map(function (f) {\n      return \"local(\\\"\".concat(f, \"\\\")\");\n    }); // Join all our strings together with a comma, so it's a valid CSS `src` rule\n\n    strOut += \"  src: \".concat(config.localName.join(', '), \";\\n\");\n  }\n\n  if (config.unicodeRange) {\n    strOut += \"  unicode-range: \".concat(config.unicodeRange, \";\\n\");\n  }\n\n  strOut += '} \\n';\n  return strOut;\n}; // Generate a collection of font-face rules, in multiple font-variants\n\n\nvar buildFontSet = function buildFontSet(fontName, fonts, strLang, bitDefault) {\n  var strOut = '',\n      name = bitDefault ? fontName : fontName + ' ' + strLang;\n\n  if (fonts[strLang].regular) {\n    // Build Regular\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].regular,\n      unicodeRange: fonts[strLang].unicodeRange\n    }); // Build Light\n\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].light || fonts[strLang].regular,\n      weight: 300,\n      unicodeRange: fonts[strLang].unicodeRange\n    }); // Build SemiBold\n\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].semibold || fonts[strLang].bold || fonts[strLang].regular,\n      weight: 600,\n      unicodeRange: fonts[strLang].unicodeRange\n    }); // Build Bold\n\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].bold || fonts[strLang].regular,\n      weight: 700,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n  }\n\n  return strOut;\n};\n\nvar buildFontDefinitionCss = function buildFontDefinitionCss(locale, buildOverrides) {\n  var matchLang = locale.match(/\\b([a-z]{2})\\b/),\n      language = matchLang && matchLang[1],\n      matchScript = locale.match(/\\b([a-z]{4})\\b/i),\n      script = matchScript && matchScript[1],\n      matchReg = locale.match(/\\b([A-Z]{2}|[0-9]{3})\\b/),\n      region = matchReg && matchReg[1];\n  var fontDefinitionCss = ''; // Build all the fonts so they could be explicitly called\n\n  for (var fontName in fontMap) {\n    var fonts = fontMap[fontName];\n\n    for (var lang in fonts) {\n      if (!buildOverrides) {\n        fontDefinitionCss += buildFontSet(fontName, fonts, lang);\n      } else {\n        // Set up the override for locale-specific font.\n        // la = language, sc = script, re = region; `la-RE` or `zh-Hans-HK`\n        var _lang$split = lang.split('-'),\n            _lang$split2 = _slicedToArray(_lang$split, 3),\n            la = _lang$split2[0],\n            sc = _lang$split2[1],\n            re = _lang$split2[2]; // if script is not specified, fall back to second part representing region\n\n\n        if (!re && sc && sc.length === 2) {\n          re = sc;\n          sc = null;\n        }\n\n        var matchesRegion = re ? re === region : true;\n        var matchesScript = sc ? sc === script : true;\n\n        if (la === language && matchesRegion && matchesScript) {\n          fontDefinitionCss += buildFontSet(fontName, fonts, lang, true);\n        }\n      }\n    }\n  }\n\n  return fontDefinitionCss;\n};\n\nvar insertFontDefinitionCss = function insertFontDefinitionCss(styleId, fontDefinitionCss) {\n  if (typeof document !== 'undefined') {\n    // Normal execution in a browser window\n    var styleElem = document.getElementById(styleId);\n\n    if (!styleElem) {\n      styleElem = document.createElement('style');\n      styleElem.setAttribute('id', styleId);\n      styleElem.setAttribute('type', 'text/css');\n      document.head.appendChild(styleElem);\n    }\n\n    styleElem.innerHTML = fontDefinitionCss;\n  } else {\n    var tag = \"<style type=\\\"text/css\\\" id=\\\"\".concat(styleId, \"\\\">\").concat(fontDefinitionCss, \"</style>\"); // We're rendering without the DOM; return the font definition stylesheet element string.\n\n    return tag;\n  }\n};\n\nfunction fontGenerator(locale) {\n  var styleId = 'localized-fonts';\n\n  if (typeof document !== 'undefined' && document.getElementById(styleId)) {\n    return;\n  }\n\n  return insertFontDefinitionCss(styleId, buildFontDefinitionCss(locale));\n}\n\nfunction fontOverrideGenerator(locale) {\n  return insertFontDefinitionCss('localized-fonts-override', buildFontDefinitionCss(locale, true));\n}\n/**\n * Generates locale-specific font rules allowing any locale to have its own custom font. Each\n * locale-font from the configuration block (defined in this file) is generated at run-time. If the\n * locale you're currently in is in the locale-font list an additional `@font-face` rule will be\n * generated that will override the standard font.\n *\n * In addition to the standard override-font being generated, named region-specific fonts are also\n * generated. This lets you incorporate language specific fonts when you're outside of one of those\n * regions; useful in a language list context where you want the name of each language to be\n * represented by that language's designated font.\n *\n * Below is example genarated-output of the Urdu (\"ur\") locale-font.\n *\n * ```css\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur';\n * \tfont-weight: 500;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Bold';\n * \tfont-weight: 700;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Light';\n * \tfont-weight: 300;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * ```\n *\n * @param {String} locale Locale string in the format\n * @returns {String} An HTML fragment of the `<style>` when prerendering\n *\n * @public\n */\n\n\nfunction generateFontRules(locale) {\n  if (!locale || locale === currentLocale) {\n    return;\n  }\n\n  currentLocale = locale;\n  return fontGenerator(locale);\n}\n\nfunction generateFontOverrideRules(locale) {\n  if (!locale) {\n    return;\n  }\n\n  return fontOverrideGenerator(locale);\n}\n/**\n * Adds a localed font to the font map\n *\n * ```\n * addLocalizedFont('My Theme Font', {\n *   'ur': {\n *      regular: 'My Theme Urdu',\n *      unicodeRange:\n *        'U+600-6FF,' +\n *        'U+FE70-FEFE,' +\n *        'U+FB50-FDFF'\n *    }\n * })\n * ```\n *\n * @param {String} name  Name of the font\n * @param {Object} fonts Object mapping font names and unicode ranges to locales\n *\n * @public\n */\n\n\nfunction addLocalizedFont(name, fonts) {\n  fontMap[name] = fonts;\n\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\n/**\n * Removes a localized font from the font map\n *\n * @param   {String} name Name of the font\n *\n * @public\n */\n\n\nfunction removeLocalizedFont(name) {\n  delete fontMap[name];\n\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\n\nmodule.exports = generateFontRules;\nmodule.exports.generateFontRules = generateFontRules;\nmodule.exports.generateFontOverrideRules = generateFontOverrideRules;\nmodule.exports.addLocalizedFont = addLocalizedFont;\nmodule.exports.removeLocalizedFont = removeLocalizedFont;"]},"metadata":{},"sourceType":"module"}