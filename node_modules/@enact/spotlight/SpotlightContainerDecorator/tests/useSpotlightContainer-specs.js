"use strict";

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _spotlight = _interopRequireDefault(require("../../src/spotlight"));

var _container = require("../../src/container");

var _useSpotlightContainer = _interopRequireDefault(require("../useSpotlightContainer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function containerExists(id) {
  return (0, _container.getContainerConfig)(id) != null;
}

describe('useSpotlightContainer', function () {
  // TODO: Test lifecycle (e.g unload, preserveId)
  function Component(props) {
    var containerConfig = props.containerConfig,
        preserveId = props.preserveId,
        spotlightDisabled = props.spotlightDisabled,
        spotlightId = props.spotlightId,
        spotlightMuted = props.spotlightMuted,
        spotlightRestrict = props.spotlightRestrict,
        rest = _objectWithoutProperties(props, ["containerConfig", "preserveId", "spotlightDisabled", "spotlightId", "spotlightMuted", "spotlightRestrict"]);

    var spotlightContainer = (0, _useSpotlightContainer["default"])({
      id: spotlightId,
      muted: spotlightMuted,
      disabled: spotlightDisabled,
      restrict: spotlightRestrict,
      // continue5WayHold, defaultElement, and enterTo can be in the containerConfig object
      containerConfig: containerConfig,
      preserveId: preserveId
    });
    return /*#__PURE__*/_react["default"].createElement("div", Object.assign({}, rest, spotlightContainer.attributes));
  } // remove all containers after each test


  afterEach(_spotlight["default"].clear);
  test('should support omitting the config object', function () {
    function Comp(props) {
      var spotlightContainer = (0, _useSpotlightContainer["default"])();
      return /*#__PURE__*/_react["default"].createElement("div", Object.assign({}, props, spotlightContainer.attributes));
    }

    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Comp, null));
    var expected = true;
    var actual = subject.prop('data-spotlight-container');
    expect(actual).toBe(expected);
  });
  describe('attributes', function () {
    test('should set `data-spotlight-container` attribute', function () {
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
      var expected = true;
      var actual = subject.prop('data-spotlight-container');
      expect(actual).toBe(expected);
    });
    test('should generate a `data-spotlight-id` attribute when `id` is unset', function () {
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
      var expected = /container-\d+/;
      var actual = subject.prop('data-spotlight-id');
      expect(actual).toMatch(expected);
    });
    test('should reuse the same generated `data-spotlight-id` attribute on re-render', function () {
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
      var expected = subject.prop('data-spotlight-id');
      subject.setProps({});
      var actual = subject.prop('data-spotlight-id');
      expect(actual).toMatch(expected);
    });
    test('should set a `data-spotlight-id` attribute when `id` is set', function () {
      var id = 'my-container';
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
        spotlightId: id
      }));
      var expected = id;
      var actual = subject.prop('data-spotlight-id');
      expect(actual).toBe(expected);
    });
    test('should set `data-spotlight-container-disabled` attribute to be falsey when `disabled` is unset', function () {
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
      var actual = subject.prop('data-spotlight-container-disabled');
      expect(actual).toBeFalsy();
    });
    test('should set `data-spotlight-container-disabled` attribute when `disabled` is set', function () {
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
        spotlightDisabled: true
      }));
      var expected = true;
      var actual = subject.prop('data-spotlight-container-disabled');
      expect(actual).toBe(expected);
    });
    test('should set `data-spotlight-container-muted` attribute to be falsey when `muted` is unset', function () {
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
      var actual = subject.prop('data-spotlight-container-muted');
      expect(actual).toBeFalsy();
    });
    test('should set `data-spotlight-container-muted` attribute when `muted` is set', function () {
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
        spotlightMuted: true
      }));
      var expected = true;
      var actual = subject.prop('data-spotlight-container-muted');
      expect(actual).toBe(expected);
    });
  });
  describe('Spotlight configuration', function () {
    test('should create a new container with the specified id', function () {
      var id = 'my-container';
      expect(containerExists(id)).toBeFalsy();
      (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
        spotlightId: id
      }));
      var expected = true;
      var actual = containerExists(id);
      expect(actual).toBe(expected);
    });
    test('should configure a new container with the specified id', function () {
      var id = 'my-container';
      expect(containerExists(id)).toBeFalsy();
      var config = {
        restrict: 'self-only',
        defaultElement: 'my-element'
      };
      (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
        spotlightId: id,
        spotlightRestrict: config.restrict,
        containerConfig: {
          defaultElement: config.defaultElement
        }
      }));
      var expected = config;
      var actual = (0, _container.getContainerConfig)(id);
      expect(actual).toMatchObject(expected);
    });
    test('should update restrict value', function () {
      var id = 'my-container';
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
        spotlightId: id,
        spotlightRestrict: "self-only"
      }));
      subject.setProps({
        spotlightRestrict: 'self-first'
      });
      var expected = {
        restrict: 'self-first'
      };
      var actual = (0, _container.getContainerConfig)(id);
      expect(actual).toMatchObject(expected);
    });
  });
});