"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "useSpotlightContainer", {
  enumerable: true,
  get: function get() {
    return _useSpotlightContainer["default"];
  }
});
exports.spotlightDefaultClass = exports.SpotlightContainerDecorator = exports["default"] = void 0;

var _handle = _interopRequireWildcard(require("@enact/core/handle"));

var _useHandlers = _interopRequireDefault(require("@enact/core/useHandlers"));

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _useSpotlightContainer = _interopRequireDefault(require("./useSpotlightContainer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var callContext = function callContext(name) {
  return function (ev, props, context) {
    return context[name](ev, props);
  };
};

var containerHandlers = {
  onMouseEnter: (0, _handle["default"])((0, _handle.forward)('onMouseEnter'), callContext('onPointerEnter')),
  onMouseLeave: (0, _handle["default"])((0, _handle.forward)('onMouseLeave'), callContext('onPointerLeave')),
  onFocusCapture: (0, _handle["default"])(callContext('onFocusCapture'), (0, _handle.forward)('onFocusCapture')),
  onBlurCapture: (0, _handle["default"])(callContext('onBlurCapture'), (0, _handle.forward)('onBlurCapture'))
};
/**
 * The class name to apply to the default component to focus in a container.
 *
 * @memberof spotlight/SpotlightContainerDecorator
 * @public
 */

var spotlightDefaultClass = 'spottable-default';
/**
 * Default config for {@link spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator}
 *
 * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator
 * @hocconfig
 */

exports.spotlightDefaultClass = spotlightDefaultClass;
var defaultConfig = {
  /**
   * When `true`, allows focus to move outside the container to the next spottable element when
   * holding 5 way keys.
   *
   * @type {Boolean}
   * @default false
   * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
   * @public
   */
  continue5WayHold: false,

  /**
   * The selector for the default spottable element within the container.
   *
   * @type {String}
   * @default '.spottable-default'
   * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
   * @public
   */
  defaultElement: ".".concat(spotlightDefaultClass),

  /**
   * Directs which element receives focus when gaining focus from another container. If
   * `'default-element'`, the default focused item will be selected. If `'last-focused'`, the
   * container will focus the last focused item; if the container has never had focus, the default
   * element will receive focus. If `null`, the default 5-way behavior will be applied.
   *
   * @type {String}
   * @default null
   * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
   * @public
   */
  enterTo: null,

  /**
   * Filter the navigable elements.
   *
   * @type {Function}
   * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
   * @public
   */
  navigableFilter: null,

  /**
   * Whether the container will preserve the specified `spotlightId` when it unmounts.
   *
   * @type {Boolean}
   * @default false
   * @memberof spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.defaultConfig
   * @public
   */
  preserveId: false
};
/**
 * Constructs a higher-order component that allows Spotlight focus to be passed to its own
 * configurable hierarchy of spottable child controls.
 *
 * Note: This HoC passes a number of props to the wrapped component that should be passed to the
 * main DOM node.
 *
 * Example:
 * ```
 *	const Component = ({myProp, ...rest}) => (
 *		<div {...rest}>{myProp}</div>
 *	);
 *	...
 *	const DefaultContainer = SpotlightContainerDecorator(Component);
 *	const FocusDefaultContainer = SpotlightContainerDecorator({enterTo: 'default-element'}, Component);
 * ```
 *
 * To specify a default element to spot in a container, utilize the `spotlightDefaultClass`.
 *
 * Example:
 * ```
 *	import Spotlight from '@enact/spotlight';
 *	import SpotlightContainerDecorator from '@enact/spotlight/SpotlightContainerDecorator';
 *	const ContainerComponent = SpotlightContainerDecorator(Component);
 *	const View = kind({
 *		render: () => {
 *			<ContainerComponent>
 *				<SpottableComponent>foo</SpottableComponent>
 *				<SpottableComponent className={spotlightDefaultClass}>spot me first</SpottableComponent>
 *			</ContainerComponent>
 *		}
 *	});
 * ```
 * @param  {Object}    defaultConfig  Set of default configuration parameters. Additional parameters
 *                                    are passed as configuration to {@link spotlight/Spotlight.set}
 * @param  {Function} higher-order component
 *
 * @returns {Function} SpotlightContainerDecorator
 * @class SpotlightContainerDecorator
 * @memberof spotlight/SpotlightContainerDecorator
 * @hoc
 */

var SpotlightContainerDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var navigableFilter = config.navigableFilter,
      preserveId = config.preserveId,
      containerConfig = _objectWithoutProperties(config, ["navigableFilter", "preserveId"]); // eslint-disable-next-line no-shadow


  function SpotlightContainerDecorator(props) {
    var spotlightDisabled = props.spotlightDisabled,
        spotlightId = props.spotlightId,
        spotlightMuted = props.spotlightMuted,
        spotlightRestrict = props.spotlightRestrict,
        rest = _objectWithoutProperties(props, ["spotlightDisabled", "spotlightId", "spotlightMuted", "spotlightRestrict"]);

    var spotlightContainer = (0, _useSpotlightContainer["default"])({
      id: spotlightId,
      muted: spotlightMuted,
      disabled: spotlightDisabled,
      restrict: spotlightRestrict,
      containerConfig: containerConfig,
      // continue5WayHold, defaultElement, and enterTo can be in the containerConfig object.
      navigableFilter: navigableFilter,
      preserveId: preserveId
    });
    var handlers = (0, _useHandlers["default"])(containerHandlers, props, spotlightContainer);
    return /*#__PURE__*/_react["default"].createElement(Wrapped, Object.assign({}, rest, spotlightContainer.attributes, handlers));
  }

  SpotlightContainerDecorator.propTypes =
  /** @lends spotlight/SpotlightContainerDecorator.SpotlightContainerDecorator.prototype */
  {
    /**
     * When `true`, controls in the container cannot be navigated.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    spotlightDisabled: _propTypes["default"].bool,

    /**
     * Used to identify this component within the Spotlight system.
     *
     * If the value is `null`, an id will be generated.
     *
     * @type {String}
     * @public
     */
    spotlightId: _propTypes["default"].string,

    /**
     * Whether or not the container is in muted mode.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    spotlightMuted: _propTypes["default"].bool,

    /**
     * Restricts or prioritizes navigation when focus attempts to leave the container. It
     * can be either 'none', 'self-first', or 'self-only'. Specifying 'self-first' indicates that
     * elements within the container will have a higher likelihood to be chosen as the next
     * navigable element. Specifying 'self-only' indicates that elements in other containers
     * cannot be navigated to by using 5-way navigation - however, elements in other containers
     * can still receive focus by calling `Spotlight.focus(elem)` explicitly. Specifying 'none'
     * indicates there should be no restrictions when 5-way navigating the container.
     *
     * @type {String}
     * @public
     */
    spotlightRestrict: _propTypes["default"].oneOf(['none', 'self-first', 'self-only'])
  };
  SpotlightContainerDecorator.defaultProps = {
    spotlightDisabled: false,
    spotlightMuted: false,
    spotlightRestrict: 'self-first'
  }; // Wrapping with a React.Component to maintain ref support

  return /*#__PURE__*/function (_React$Component) {
    _inherits(SpotlightContainerDecoratorAdapter, _React$Component);

    var _super = _createSuper(SpotlightContainerDecoratorAdapter);

    function SpotlightContainerDecoratorAdapter() {
      _classCallCheck(this, SpotlightContainerDecoratorAdapter);

      return _super.apply(this, arguments);
    }

    _createClass(SpotlightContainerDecoratorAdapter, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/_react["default"].createElement(SpotlightContainerDecorator, this.props);
      }
    }]);

    return SpotlightContainerDecoratorAdapter;
  }(_react["default"].Component);
});
exports.SpotlightContainerDecorator = SpotlightContainerDecorator;
var _default = SpotlightContainerDecorator;
exports["default"] = _default;