"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _useAnnounce2 = _interopRequireDefault(require("../useAnnounce"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('useAnnounce', function () {
  function Base(_ref) {
    var children = _ref.children;
    return /*#__PURE__*/_react["default"].createElement("div", null, children);
  }

  function Component() {
    var _useAnnounce = (0, _useAnnounce2["default"])(),
        announce = _useAnnounce.announce,
        children = _useAnnounce.children;

    return /*#__PURE__*/_react["default"].createElement(Base, {
      announce: announce
    }, children);
  }

  test('should return an announce function', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    var expected = 'function';
    var actual = typeof subject.prop('announce');
    expect(actual).toBe(expected);
  });
  test('should return a single element in children', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    var expected = true;

    var actual = /*#__PURE__*/_react["default"].isValidElement(subject.prop('children'));

    expect(actual).toBe(expected);
  }); // this might be too specialized to the implmentation but we lack a better way to unit test this
  // capability right now

  test('should set the value passed to announce into the ARIA role="alert" node', function () {
    var text = '__NOTIFY__';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(Component, null));
    subject.find(Base).invoke('announce')(text);
    subject.update();
    var expected = text; // Have to get the actual DOM node here since Announce updates the DOM directly so the
    // change isn't represented in either the React or Enzyme views

    var actual = subject.find({
      role: 'alert'
    }).instance().getAttribute('aria-label');
    expect(actual).toBe(expected);
  });
});