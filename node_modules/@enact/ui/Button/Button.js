"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonDecorator = exports.ButtonBase = exports.Button = exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _ComponentOverride = _interopRequireDefault(require("../ComponentOverride"));

var _Touchable = _interopRequireDefault(require("../Touchable"));

var _ButtonModule = _interopRequireDefault(require("./Button.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A basic button component structure without any behaviors applied to it.
 *
 * @class ButtonBase
 * @memberof ui/Button
 * @ui
 * @public
 */
var ButtonBase = (0, _kind["default"])({
  name: 'ui:Button',
  propTypes:
  /** @lends ui/Button.ButtonBase.prototype */
  {
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `button` - The root component class
     * * `bg` - The background node of the button
     * * `client` - The content node of the button
     * * `hasIcon` - Applied when there is an `icon` present
     * * `icon` - The icon node, when `icon` is set
     * * `large` - Applied when `size` prop is `'large'`
     * * `minWidth` - Applied when `minWidth` prop is `true`
     * * `pressed` - Applied when `pressed` prop is `true`
     * * `selected` - Applied when `selected` prop is `true`
     * * `small` - Applied when `size` prop is `'small'`
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Additional DOM nodes which may be necessary for decorating the Button.
     *
     * @type {Node}
     * @private
     */
    decoration: _propTypes2["default"].node,

    /**
     * Applies the `disabled` class.
     *
     * When `true`, the button is shown as disabled.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes2["default"].bool,

    /**
     * The icon displayed within the Button.
     *
     * The icon will be displayed before the natural reading order of the text, regardless
     * of locale. Any string that is valid for its {@link ui/Button.Button.iconComponent} is
     * valid here. If `icon` is specified as a string and `iconButton` is undefined, the icon is
     * not rendered.
     *
     * This also supports a custom icon, in the form of a DOM node or a Component,
     * with the caveat that if you supply a custom icon, you are responsible for sizing and
     * locale positioning of the custom component.
     *
     * Setting this to `true` means the `iconComponent` will be rendered but with empty content.
     * This may be useful if you've customized the `iconComponent` to render the icon content
     * externally.
     *
     * @type {Node|Boolean}
     * @public
     */
    icon: _propTypes2["default"].oneOfType([_propTypes2["default"].node, _propTypes2["default"].bool]),

    /**
     * The component used to render the [icon]{@link ui/Button.ButtonBase.icon}.
     *
     * This component will receive the `icon` class to customize its styling.
     * If [icon]{@link ui/Button.ButtonBase.icon} is not assigned or is false, this component
     * will not be rendered.
     *
     * If this is a component rather than an HTML element string, this component will also
     * receive the `size` and `iconFlip` (as `flip`) properties and should be configured to
     * handle it.
     *
     * @type {Component|Node}
     * @public
     */
    iconComponent: _propTypes["default"].componentOverride,

    /**
     * Flips the icon.
     *
     * @see {@link ui/Icon.Icon#flip}
     * @type {String}
     * @public
     */
    iconFlip: _propTypes2["default"].string,

    /**
     * Enforces a minimum width for the component.
     *
     * Applies the `minWidth` CSS class which can be customized by
     * [theming]{@link /docs/developer-guide/theming/}.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    minWidth: _propTypes2["default"].bool,

    /**
     * Indicates the component is depressed.
     *
     * Applies the `pressed` CSS class which can be customized by
     * [theming]{@link /docs/developer-guide/theming/}.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    pressed: _propTypes2["default"].bool,

    /**
     * Indicates the component is selected.
     *
     * Applies the `selected` CSS class which can be customized by
     * [theming]{@link /docs/developer-guide/theming/}.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    selected: _propTypes2["default"].bool,

    /**
     * The size of the button.
     *
     * Applies the CSS class which can be customized by
     * [theming]{@link /docs/developer-guide/theming/}.
     *
     * @type {String}
     * @default 'large'
     * @public
     */
    size: _propTypes2["default"].string
  },
  defaultProps: {
    disabled: false,
    minWidth: true,
    pressed: false,
    selected: false
  },
  styles: {
    css: _ButtonModule["default"],
    className: 'button',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref) {
      var icon = _ref.icon,
          minWidth = _ref.minWidth,
          pressed = _ref.pressed,
          selected = _ref.selected,
          size = _ref.size,
          styler = _ref.styler;
      return styler.append({
        hasIcon: !!icon,
        minWidth: minWidth,
        pressed: pressed,
        selected: selected
      }, size);
    },
    icon: function icon(_ref2) {
      var css = _ref2.css,
          _icon = _ref2.icon,
          iconComponent = _ref2.iconComponent,
          iconFlip = _ref2.iconFlip,
          size = _ref2.size;
      if (_icon == null || _icon === false) return; // Establish the base collection of props for the most basic `iconComponent` type, an
      // HTML element string.

      var props = {
        className: css.icon,
        component: iconComponent
      }; // Add in additional props that any Component supplied to `iconComponent` should be
      // configured to handle.

      if (typeof iconComponent !== 'string') {
        props.size = size; // the following inadvertently triggers a linting rule
        // eslint-disable-next-line enact/prop-types

        props.flip = iconFlip;
      }

      return /*#__PURE__*/_react["default"].createElement(_ComponentOverride["default"], props, _icon);
    }
  },
  render: function render(_ref3) {
    var children = _ref3.children,
        css = _ref3.css,
        decoration = _ref3.decoration,
        disabled = _ref3.disabled,
        icon = _ref3.icon,
        rest = _objectWithoutProperties(_ref3, ["children", "css", "decoration", "disabled", "icon"]);

    delete rest.iconComponent;
    delete rest.iconFlip;
    delete rest.minWidth;
    delete rest.pressed;
    delete rest.selected;
    delete rest.size;
    return /*#__PURE__*/_react["default"].createElement("div", Object.assign({
      role: "button"
    }, rest, {
      "aria-disabled": disabled,
      disabled: disabled
    }), decoration ? /*#__PURE__*/_react["default"].createElement("div", {
      className: css.decoration
    }, decoration) : null, /*#__PURE__*/_react["default"].createElement("div", {
      className: css.bg
    }), /*#__PURE__*/_react["default"].createElement("div", {
      className: css.client
    }, icon, children));
  }
});
/**
 * A higher-order component that adds touch support to a [ButtonBase]{@link ui/Button.ButtonBase}.
 *
 * @hoc
 * @memberof ui/Button
 * @mixes ui/Touchable.Touchable
 * @public
 */

exports.ButtonBase = ButtonBase;
var ButtonDecorator = (0, _Touchable["default"])({
  activeProp: 'pressed'
});
/**
 * A minimally-styled button component with touch support.
 *
 * @class Button
 * @extends ui/Button.ButtonBase
 * @memberof ui/Button
 * @mixes ui/Button.ButtonDecorator
 * @ui
 * @public
 */

exports.ButtonDecorator = ButtonDecorator;
var Button = ButtonDecorator(ButtonBase);
exports.Button = Button;
var _default = Button;
exports["default"] = _default;