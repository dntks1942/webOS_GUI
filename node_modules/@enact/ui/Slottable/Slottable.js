"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "useSlots", {
  enumerable: true,
  get: function get() {
    return _useSlots["default"];
  }
});
exports.Slottable = exports["default"] = void 0;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _react = _interopRequireDefault(require("react"));

var _useSlots = _interopRequireDefault(require("./useSlots"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Provides a higher-order component that render child components into pre-designated slots.
 *
 * See [SlotItem]{@link ui/SlotItem.SlotItemDecorator} for the use of `Slottable`.
 *
 * @module ui/Slottable
 * @exports Slottable
 */

/**
 * Default config for `Slottable`.
 *
 * @memberof ui/Slottable.Slottable
 * @hocconfig
 * @public
 */
var defaultConfig = {
  /**
   * Array of slot names which will be extracted from `children` and distributed to props.
   *
   * @type {String[]}
   * @memberof ui/Slottable.Slottable.defaultConfig
   */
  slots: null
};
/**
 * A higher-order component that allows wrapped components to separate children into pre-designated 'slots'.
 *
 * To use `Slottable`, you must configure it by passing in a config object with the `slots` member set to an
 * array of slot names.  Any children whose `slot` or `defaultSlot` property matches a named slot or whose
 * type matches a named slot will be placed into a property of the same name on the wrapped component.
 *
 * @class Slottable
 * @memberof ui/Slottable
 * @hoc
 * @public
 */

var Slottable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var slots = config.slots; // eslint-disable-next-line no-shadow

  return function Slottable(props) {
    // extract the slots into a new object but populating the default value to be undefined so
    // the key exists in order to allow the current "harmful" behavior below. Must be undefined
    // in order to trigger defaultProps on downstream components.
    var slotProps = {
      children: props.children
    };
    slots.forEach(function (k) {
      return slotProps[k] = undefined;
    }); // eslint-disable-line no-undefined
    // Slottable allows there to be other values in the destination slot and merges them.
    // However, consumers can't avoid key warnings when merging the two lists so we should
    // "consider this harmful" and not continue to support this with the hook and instead
    // encourage using the slot as the default with the prop as a fallback as implemented by the
    // hook.

    var distributed = (0, _useSlots["default"])(slotProps);
    slots.forEach(function (slot) {
      var dist = distributed[slot];
      var prop = props[slot];

      if (prop != null && dist != null) {
        distributed[slot] = [].concat(prop, dist);
      } else if (prop != null) {
        distributed[slot] = prop;
      }
    });
    return /*#__PURE__*/_react["default"].createElement(Wrapped, Object.assign({}, props, distributed));
  };
});
exports.Slottable = Slottable;
var _default = Slottable;
exports["default"] = _default;