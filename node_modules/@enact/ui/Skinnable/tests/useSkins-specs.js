"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _useSkins = _interopRequireDefault(require("../useSkins"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('Skinnable Specs', function () {
  function Base() {
    return null;
  }

  function Component(_ref) {
    var config = _ref.config;
    // eslint-disable-line enact/prop-types
    var skins = (0, _useSkins["default"])(config);
    return /*#__PURE__*/_react["default"].createElement(Base, skins);
  }

  function Parent(_ref2) {
    var config = _ref2.config,
        children = _ref2.children;
    var skins = (0, _useSkins["default"])(config);
    return skins.provideSkins(children);
  }

  test('should add a default skin class when no skin prop is specified', function () {
    var config = {
      defaultSkin: 'dark',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      }
    };
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      config: config
    }));
    var expected = 'darkSkin';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
  test('should add the preferred skin class when the skin prop is specified', function () {
    var config = {
      defaultSkin: 'dark',
      skin: 'light',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      }
    };
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      config: config
    }));
    var expected = 'lightSkin';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
  test('should ignore the preferred skin prop if it\'s not one of the available skins', function () {
    var config = {
      defaultSkin: 'dark',
      skin: 'potato',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      }
    };
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      config: config
    }));
    var expected = '';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
  test('should ignore the skinVariants prop if there are no defined allowedVariants', function () {
    var config = {
      defaultSkin: 'dark',
      skinVariants: 'potato',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      }
    };
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      config: config
    }));
    var expected = 'darkSkin';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
  test('should only apply allowed variants assigned by the skinVariants prop', function () {
    var config = {
      defaultSkin: 'dark',
      skinVariants: 'normal potato unicase',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      variants: ['normal', 'smallCaps', 'unicase']
    };
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      config: config
    }));
    var expected = 'darkSkin normal unicase';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
  test('should apply default variants even if the skinVariants prop is explicitly empty', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skinVariants: '',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      variants: ['normal', 'smallCaps', 'unicase']
    };
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      config: config
    }));
    var expected = 'darkSkin normal';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
  test('should apply default variants and the skinVariants if both are defined', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skinVariants: 'unicase',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      variants: ['normal', 'smallCaps', 'unicase']
    };
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      config: config
    }));
    var expected = 'darkSkin normal unicase';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
  test('should apply variants supplied via an array or a string in the same way', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      variants: ['normal', 'smallCaps', 'unicase']
    };
    var subjectA = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      config: _objectSpread(_objectSpread({}, config), {}, {
        skinVariants: 'normal unicase'
      })
    }));
    var subjectB = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      config: _objectSpread(_objectSpread({}, config), {}, {
        skinVariants: ['normal', 'unicase']
      })
    }));
    expect(subjectA.find(Base).prop('className')).toBe(subjectB.find(Base).prop('className'));
  });
  test('should allow opting out of the default variants if an object is supplied to skinVariants with false as variant-key values', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skinVariants: {
        normal: false,
        unicase: true
      },
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      variants: ['normal', 'smallCaps', 'unicase']
    };
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      config: config
    }));
    var expected = 'darkSkin unicase';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
  test('should ignore variants, sent by an object, equaling null, undefined, or empty string', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skinVariants: {
        normal: null,
        smallCaps: void 0,
        unicase: ''
      },
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      variants: ['normal', 'smallCaps', 'unicase']
    };
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      config: config
    }));
    var expected = 'darkSkin normal';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
  test('should apply parent variants', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      variants: ['normal', 'smallCaps', 'unicase']
    };
    var subject = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(Parent, {
      config: _objectSpread(_objectSpread({}, config), {}, {
        skinVariants: 'unicase'
      })
    }, /*#__PURE__*/_react["default"].createElement(Component, {
      config: _objectSpread(_objectSpread({}, config), {}, {
        skinVariants: 'smallCaps'
      })
    })));
    var expected = 'darkSkin normal unicase smallCaps';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
  test('should be able to override a parent\'s variants by assigning a false skinVariant', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      variants: ['normal', 'smallCaps', 'unicase']
    };
    var subject = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(Parent, {
      config: _objectSpread(_objectSpread({}, config), {}, {
        skinVariants: 'smallCaps unicase'
      })
    }, /*#__PURE__*/_react["default"].createElement(Component, {
      config: _objectSpread(_objectSpread({}, config), {}, {
        skinVariants: {
          unicase: false
        }
      })
    })));
    var expected = 'darkSkin normal smallCaps';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
  test('should inherit an overridden default variant', function () {
    var config = {
      defaultSkin: 'dark',
      defaultVariants: 'normal',
      skins: {
        dark: 'darkSkin',
        light: 'lightSkin'
      },
      variants: ['normal', 'smallCaps', 'unicase']
    };
    var subject = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(Parent, {
      config: config
    }, /*#__PURE__*/_react["default"].createElement(Parent, {
      config: _objectSpread(_objectSpread({}, config), {}, {
        skinVariants: {
          normal: false
        }
      })
    }, /*#__PURE__*/_react["default"].createElement(Component, {
      config: config
    }))));
    var expected = 'darkSkin';
    var actual = subject.find(Base).prop('className');
    expect(actual).toBe(expected);
  });
});