// Type definitions for ui/Routable

import * as React from "react";

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface RoutableConfig extends Object {
  /**
 * The event to listen to for path changes.
 * 
 * This defines the actual name of the  navigate  
property.
 */
  navigate: string;
}
export interface RoutableProps {
  /**
 * Path to the active panel.
 * 
 * May either be a URI-style path ( `'/app/home/settings'` ) or an array
of strings ( `['app', 'home', 'settings']` ).
 */
  path: string | string[];
  /**
   * Called when navigating.
   *
   * The event object is decorated to add  `path` .
   *
   * _NOTE_ : The actual name of this property is configured in the HOC config.
   */
  navigate?: Function;
}
export function Routable<P>(
  config: RoutableConfig,
  Component: React.ComponentType<P> | string
): React.ComponentType<P & RoutableProps>;

export function Routable<P>(
  Component: React.ComponentType<P> | string
): React.ComponentType<P & RoutableProps>;

export interface RouteProps {
  /**
 * The component to render when the  `path`  for this Route matches the path of the
   container.
 */
  component: string | React.ComponentType;
  /**
   * The name of the path segment.
   */
  path: string;
}
/**
 * Used with    to define the  `path`  segment and the
 `component`  to render.
 * 
 * `Route`  elements can be nested to build multiple level paths.
 * 
 * In the below example,  `Panels`  would render  `SettingsPanel`  with breadcrumbs to
navigate  `AppPanel`  and  `HomePanel` .
 * ```
<Panels path="/app/home/settings" onSelectBreadcrumb={this.handleNavigate}>
	<Route path="app" component={AppPanel}>
		<Route path="home" component={HomePanel}>
			<Route path="settings" component={SettingsPanel} />
		</Route>
	</Route>
	<Route path="admin" component={AdminPanel} />
	<Route path="help" component={HelpPanel} />
</Panels>
```
 */

export class Route extends React.Component<
  Merge<React.HTMLProps<HTMLElement>, RouteProps>
> {}

export default Routable;
