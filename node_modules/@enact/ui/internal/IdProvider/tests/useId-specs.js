"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _useId = _interopRequireDefault(require("../useId"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('useId', function () {
  function Base() {
    return null;
  } // eslint-disable-next-line enact/prop-types


  function Component(_ref) {
    var key = _ref.key,
        prefix = _ref.prefix,
        onUnmount = _ref.onUnmount;
    var provider = (0, _useId["default"])({
      prefix: prefix
    });
    return /*#__PURE__*/_react["default"].createElement(Base, Object.assign({}, provider, {
      id: provider.generateId(key, prefix, onUnmount)
    }));
  }

  test('should provide a generateId method', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    var expected = 'function';
    var actual = typeof subject.find(Base).prop('generateId');
    expect(actual).toBe(expected);
  });
  test('should generate different ids for different instances of the same component', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(Component, null), /*#__PURE__*/_react["default"].createElement(Component, null)));
    var first = subject.find(Base).first().prop('id');
    var last = subject.find(Base).last().prop('id');
    expect(first).not.toBe(last);
  });
  test('should maintain the same id across renders', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    var expected = subject.find(Base).prop('id');
    subject.setProps({});
    var actual = subject.find(Base).prop('id');
    expect(actual).toBe(expected);
  });
  test('should prefix the id with the provided value', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      prefix: "my-id"
    }));
    var expected = 'my-id';
    var actual = subject.find(Base).prop('id').substring(0, 5);
    expect(actual).toBe(expected);
  });
  test('should call onUnmount callback', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(Component, {
      onUnmount: spy
    }));
    subject.unmount();
    expect(spy).toHaveBeenCalledTimes(1);
  });
});