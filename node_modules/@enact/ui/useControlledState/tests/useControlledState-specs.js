"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _useControlledState3 = _interopRequireDefault(require("../useControlledState"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

describe('useControlledState', function () {
  function Component(props) {
    // eslint-disable-next-line enact/prop-types
    var _useControlledState = (0, _useControlledState3["default"])(props.defaultValue, props.value, 'value' in props),
        _useControlledState2 = _slicedToArray(_useControlledState, 2),
        value = _useControlledState2[0],
        setValue = _useControlledState2[1];

    return /*#__PURE__*/_react["default"].createElement("div", {
      setValue: setValue
    }, value);
  }

  test('should use the default value when the value is undefined', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      defaultValue: "abc"
    }));
    var expected = 'abc';
    var actual = subject.find('div').prop('children');
    expect(actual).toBe(expected);
  });
  test('should not change default value', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      defaultValue: "abc"
    }));
    subject.setProps({
      defaultValue: 'def'
    });
    var expected = 'abc';
    var actual = subject.find('div').prop('children');
    expect(actual).toBe(expected);
  });
  test('should not change uncontrolled setting', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      defaultValue: "abc"
    }));
    subject.setProps({
      defaultValue: null,
      value: 'def'
    });
    var expected = 'abc';
    var actual = subject.find('div').prop('children');
    expect(actual).toBe(expected);
  });
  test('should update controlled value', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      value: "abc"
    }));
    subject.setProps({
      value: 'def'
    });
    var expected = 'def';
    var actual = subject.find('div').prop('children');
    expect(actual).toBe(expected);
  });
  test('should not change controlled setting', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      value: "abc"
    }));
    subject.setProps({
      defaultValue: 'def',
      value: 'ghi'
    });
    var expected = 'ghi';
    var actual = subject.find('div').prop('children');
    expect(actual).toBe(expected);
  });
  test('should not allow setting a value when controlled', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      value: "abc"
    }));
    subject.invoke('setValue')('ghi');
    subject.update();
    var expected = 'abc';
    var actual = subject.find('div').prop('children');
    expect(actual).toBe(expected);
  });
});