"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarqueeBase = exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _handle = require("@enact/core/handle");

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _MarqueeModule = _interopRequireDefault(require("./Marquee.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var isEventSource = function isEventSource(ev) {
  return ev.target === ev.currentTarget;
};
/**
 * Marquees the children of the component.
 *
 * For automated marquee calculations use {@link ui/Marquee.Marquee}.
 *
 * @class MarqueeBase
 * @memberof ui/Marquee
 * @ui
 * @public
 */


var MarqueeBase = (0, _kind["default"])({
  name: 'ui:Marquee',
  propTypes:
  /** @lends ui/Marquee.MarqueeBase.prototype */
  {
    /**
     * Text alignment value of the marquee
     *
     * Valid values are:
     *
     * * `'left'`,
     * * `'right'`, and
     * * `'center'`
     *
     * @type {String}
     * @public
     */
    alignment: _propTypes2["default"].oneOf(['left', 'right', 'center']),

    /**
     * Applies animating styles such as removing the ellipsis.
     *
     * @type {Boolean}
     * @public
     */
    animating: _propTypes2["default"].bool,

    /**
     * Sets the value of the `aria-label` attribute for the wrapped component.
     *
     * @memberof ui/Marquee.MarqueeBase.prototype
     * @type {String}
     * @public
     */
    'aria-label': _propTypes2["default"].string,

    /**
     * The text or a set of components that should be marqueed
     *
     * This prop may be empty in some cases, which is OK.
     *
     * @type {Node}
     * @public
     */
    children: _propTypes2["default"].node,

    /**
     * Called when mounting or unmounting with a reference to the client node
     *
     * @type {Object|Function}
     * @public
     */
    clientRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `marquee` - The root component class
     * * `animate` - Applied to the inner content node when the text is animating
     * * `spacing` - The spacing node used between the repeated content
     * * `text` - The inner content node
     * * `willAnimate` - Applied to the inner content node shortly before animation
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Distance to animate the marquee
     *
     * Usually, the `distance` is the width of the text minus the width of the container
     *
     * @type {Number}
     * @public
     */
    distance: _propTypes2["default"].number,

    /**
     * Called when the marquee completes its animation
     *
     * @type {Function}
     * @public
     */
    onMarqueeComplete: _propTypes2["default"].func,

    /**
     * Text overflow setting. Either `'clip'` or `'ellipsis'`
     *
     * @type {('clip'|'ellipsis')}
     * @public
     */
    overflow: _propTypes2["default"].oneOf(['clip', 'ellipsis']),

    /**
     * `true` if the directionality of the content is right-to-left
     *
     * @type {Boolean}
     * @public
     * @default false
     */
    rtl: _propTypes2["default"].bool,

    /**
     * Amount of spacing, in pixels, between the instances of the content
     *
     * @type {Number}
     * @default 0
     * @public
     */
    spacing: _propTypes2["default"].number,

    /**
     * Speed of marquee animation in pixels/second.
     *
     * @type {Number}
     * @public
     */
    speed: _propTypes2["default"].number,

    /**
     * Indicates the marquee will animate soon.
     *
     * Should be used by the component to prepare itself for animation such as promoting
     * composite layers for improved performance.
     *
     * @type {Boolean}
     * @public
     * @default false
     */
    willAnimate: _propTypes2["default"].bool
  },
  defaultProps: {
    spacing: 0,
    rtl: false,
    willAnimate: false
  },
  styles: {
    css: _MarqueeModule["default"],
    className: 'marquee',
    publicClassNames: true
  },
  handlers: {
    applyOffset: function applyOffset(node, _ref) {
      var distance = _ref.distance,
          rtl = _ref.rtl,
          spacing = _ref.spacing;
      if (!node || !global.IntersectionObserver) return;
      var root = node.parentNode;
      new global.IntersectionObserver(function (entries, observer) {
        var _entries$0$boundingCl = entries[0].boundingClientRect,
            left = _entries$0$boundingCl.left,
            right = _entries$0$boundingCl.right;
        var _entries$0$rootBounds = entries[0].rootBounds,
            rootLeft = _entries$0$rootBounds.left,
            rootRight = _entries$0$rootBounds.right;
        var textWidth = rtl ? rootRight - right : left - rootLeft;
        var offset = distance - (textWidth + spacing);
        node.style.setProperty('--ui-marquee-offset', offset);
        observer.disconnect();
      }, {
        root: root
      }).observe(node);
    },
    onMarqueeComplete: (0, _handle.handle)((0, _handle.forProp)('animating', true), isEventSource, _handle.stop, function (ev, props) {
      return (0, _handle.forward)('onMarqueeComplete', {
        type: 'onMarqueeComplete'
      }, props);
    })
  },
  computed: {
    'aria-label': function ariaLabel(_ref2) {
      var aria = _ref2['aria-label'],
          children = _ref2.children,
          distance = _ref2.distance,
          willAnimate = _ref2.willAnimate;

      if (children != null && aria == null && willAnimate && distance > 0) {
        return _react["default"].Children.map(children, function (c) {
          return typeof c === 'string' && c;
        }).filter(Boolean).join(' ') || aria;
      } else {
        return aria;
      }
    },
    clientClassName: function clientClassName(_ref3) {
      var animating = _ref3.animating,
          willAnimate = _ref3.willAnimate,
          styler = _ref3.styler;
      return styler.join({
        animate: animating,
        text: true,
        willAnimate: willAnimate
      });
    },
    clientStyle: function clientStyle(_ref4) {
      var alignment = _ref4.alignment,
          animating = _ref4.animating,
          distance = _ref4.distance,
          overflow = _ref4.overflow,
          rtl = _ref4.rtl,
          spacing = _ref4.spacing,
          speed = _ref4.speed;
      // If the components content directionality doesn't match the context, we need to set it
      // inline
      var direction = rtl ? 'rtl' : 'ltr';
      var rtlDirectionMultiplier = rtl ? 1 : -1;
      var style = {
        '--ui-marquee-spacing': spacing,
        direction: direction,
        textAlign: alignment,
        textOverflow: overflow
      };

      if (animating) {
        var duration = distance / speed;
        style.transform = "translateX(".concat(distance * rtlDirectionMultiplier, "px)");
        style.transitionDuration = "".concat(duration, "s");
      } else {
        style.transform = 'translateX(0)';
      }

      return style;
    },
    duplicate: function duplicate(_ref5) {
      var distance = _ref5.distance,
          willAnimate = _ref5.willAnimate;
      return willAnimate && distance > 0;
    }
  },
  render: function render(_ref6) {
    var applyOffset = _ref6.applyOffset,
        children = _ref6.children,
        clientClassName = _ref6.clientClassName,
        clientRef = _ref6.clientRef,
        clientStyle = _ref6.clientStyle,
        css = _ref6.css,
        duplicate = _ref6.duplicate,
        onMarqueeComplete = _ref6.onMarqueeComplete,
        rest = _objectWithoutProperties(_ref6, ["applyOffset", "children", "clientClassName", "clientRef", "clientStyle", "css", "duplicate", "onMarqueeComplete"]);

    delete rest.alignment;
    delete rest.animating;
    delete rest.distance;
    delete rest.onMarqueeComplete;
    delete rest.overflow;
    delete rest.rtl;
    delete rest.spacing;
    delete rest.speed;
    delete rest.willAnimate;
    return /*#__PURE__*/_react["default"].createElement("div", rest, /*#__PURE__*/_react["default"].createElement("div", {
      className: clientClassName,
      ref: clientRef,
      style: clientStyle,
      onTransitionEnd: onMarqueeComplete
    }, children, duplicate ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
      className: css.spacing,
      ref: applyOffset
    }), children) : null));
  }
});
exports.MarqueeBase = MarqueeBase;
var _default = MarqueeBase;
exports["default"] = _default;