"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ToggleItem = _interopRequireWildcard(require("../ToggleItem"));

var _Icon = _interopRequireDefault(require("../../Icon"));

var _SlotItem = _interopRequireDefault(require("../../SlotItem"));

var _Item = _interopRequireDefault(require("../../Item"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var SlottedItem = function SlottedItem(props) {
  return /*#__PURE__*/_react["default"].createElement(_SlotItem["default"], Object.assign({}, props, {
    component: _Item["default"]
  }));
};

var tap = function tap(node) {
  node.simulate('mousedown');
  node.simulate('mouseup');
};

var CustomIcon = function CustomIcon(props) {
  return /*#__PURE__*/_react["default"].createElement(_Icon["default"], props, "star");
};

describe('ToggleItem Specs', function () {
  test('should call onToggle, onClick, or both when clicked', function () {
    var handleToggle = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_ToggleItem["default"], {
      component: SlottedItem,
      onToggle: handleToggle,
      iconComponent: CustomIcon
    }, "Toggle Item"));
    tap(subject);
    var expected = 1;
    var actual = handleToggle.mock.calls.length;
    expect(expected).toBe(actual);
  });
  test('should call onClick when clicked', function () {
    var handleClick = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_ToggleItem.ToggleItemBase, {
      component: SlottedItem,
      onClick: handleClick,
      iconComponent: CustomIcon
    }, "Toggle Item"));
    subject.simulate('click');
    var expected = 1;
    var actual = handleClick.mock.calls.length;
    expect(expected).toBe(actual);
  });
  test('should call onTap when tapped', function () {
    var handleTap = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_ToggleItem["default"], {
      component: SlottedItem,
      onTap: handleTap,
      iconComponent: CustomIcon
    }, "Toggle Item"));
    tap(subject);
    var expected = 1;
    var actual = handleTap.mock.calls.length;
    expect(expected).toBe(actual);
  });
  test('should call both onToggle and onTap when tapped', function () {
    var handleBoth = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_ToggleItem["default"], {
      component: SlottedItem,
      onTap: handleBoth,
      onToggle: handleBoth,
      iconComponent: CustomIcon
    }, "Toggle Item"));
    tap(subject);
    var expected = 2;
    var actual = handleBoth.mock.calls.length;
    expect(expected).toBe(actual);
  });
  test('should receive its value prop in the onToggle handler', function () {
    var handleToggle = jest.fn();
    var value = 100;
    var subject = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_ToggleItem["default"], {
      component: SlottedItem,
      onToggle: handleToggle,
      iconComponent: CustomIcon,
      value: value
    }, "Toggle Item"));
    tap(subject);
    var expected = value;
    var actual = handleToggle.mock.calls[0][0].value;
    expect(expected).toBe(actual);
  });
});