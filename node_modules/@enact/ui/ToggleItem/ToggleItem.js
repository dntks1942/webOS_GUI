"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleItemDecorator = exports.ToggleItemBase = exports.ToggleItem = exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _compose = _interopRequireDefault(require("ramda/src/compose"));

var _react = _interopRequireWildcard(require("react"));

var _ComponentOverride = _interopRequireDefault(require("../ComponentOverride"));

var _ForwardRef = _interopRequireDefault(require("../ForwardRef"));

var _Toggleable = _interopRequireDefault(require("../Toggleable"));

var _Touchable = _interopRequireDefault(require("../Touchable"));

var _ToggleItemModule = _interopRequireDefault(require("./ToggleItem.module.css"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// eslint-disable-next-line enact/display-name,enact/prop-types
var iconCreator = function iconCreator(position) {
  return function (_ref) {
    var disabled = _ref.disabled,
        icon = _ref.icon,
        iconComponent = _ref.iconComponent,
        iconPosition = _ref.iconPosition,
        itemIcon = _ref.itemIcon,
        itemIconPosition = _ref.itemIconPosition,
        selected = _ref.selected;

    if (position === 'before') {
      return /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, itemIconPosition === 'before' && itemIcon, iconPosition === 'before' ? /*#__PURE__*/_react["default"].createElement(_ComponentOverride["default"], {
        component: iconComponent,
        disabled: disabled,
        selected: selected
      }, icon) : null, itemIconPosition === 'beforeChildren' && itemIcon);
    } else {
      return /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, itemIconPosition === 'afterChildren' && itemIcon, iconPosition === 'after' ? /*#__PURE__*/_react["default"].createElement(_ComponentOverride["default"], {
        component: iconComponent,
        disabled: disabled,
        selected: selected
      }, icon) : null, itemIconPosition === 'after' && itemIcon);
    }
  };
};
/**
 * A minimally styled toggle item without any behavior, ripe for extension.
 *
 * @class ToggleItemBase
 * @memberof ui/ToggleItem
 * @ui
 * @public
 */


var ToggleItemBase = (0, _kind["default"])({
  name: 'ui:ToggleItem',
  propTypes:
  /** @lends ui/ToggleItem.ToggleItemBase.prototype */
  {
    /**
     * The main content of the toggle item.
     *
     * @type {Node}
     * @required
     * @public
     */
    children: _propTypes2["default"].node.isRequired,

    /**
     * The type of component to use to render as root element.
     *
     * This receives the `css` prop for theme extension and therefore must be a custom
     * component and not a simple HTML DOM node. Recommended component or themed
     * derivative: [SlotItem]{@link ui/SlotItem.SlotItem}
     *
     * @type {Component}
     * @required
     * @public
     */
    component: _propTypes["default"].component.isRequired,

    /**
     * The `Icon` to render in this item.
     *
     * This component receives the `selected` prop and value,
     * and must therefore respond to it in some way. It is recommended to use
     * [ToggleIcon]{@link ui/ToggleIcon} for this.
     *
     * @type {Component|Element}
     * @required
     * @public
     */
    iconComponent: _propTypes["default"].componentOverride.isRequired,

    /**
     * Called with a reference to [component]{@link ui/ToggleItem.ToggleItemBase#component}
     *
     * @type {Object|Function}
     * @private
     */
    componentRef: _propTypes["default"].ref,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `toggleItem` - The root class name
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Applies a disabled visual state to the toggle item.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes2["default"].bool,

    /**
     * An optional prop that lets you override the icon of the `iconComponent` component.
     *
     * This accepts any string that the [Icon]{@link ui/Icon.Icon} component supports, provided
     * the recommendations of `iconComponent` are followed.
     *
     * @type {String|Object}
     * @public
     */
    icon: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),

    /**
     * Specifies on which side (`'before'` or `'after'`) of `children` the icon appears.
     *
     * @type {('before'|'after')}
     * @default 'before'
     * @public
     */
    iconPosition: _propTypes2["default"].oneOf(['before', 'after']),

    /**
     * An additional customizable icon component.
     *
     * Supports more granular positioning rules. This should only be used *after* specifying the
     * `icon` property, as the positioning for this offers the ability to place this in front of
     * or behind the existing `icon`. See `itemIconPosition` for options.
     *
     * @type {Node}
     * @public
     */
    itemIcon: _propTypes2["default"].node,

    /**
     * Specifies where `itemIcon` appears.
     *
     * * `'before'` - first element in the item
     * * `'beforeChildren'` - before `children`. If `iconPosition` is `'before'`, `icon` will be
     *	before `itemIcon`
     * * `'afterChildren'` - after `children`. If iconPosition` is `'after'`, `icon` will be
     *	after `itemIcon`
     * * `'after'` - the last element in the item
     *
     * @type {('before'|'beforeChildren'|'afterChildren'|'after')}
     * @default 'afterChildren'
     * @public
     */
    itemIconPosition: _propTypes2["default"].oneOf(['before', 'beforeChildren', 'afterChildren', 'after']),

    /**
     * Called when the toggle item is toggled. Developers should generally use `onToggle` instead.
     *
     * @type {Function}
     * @public
     */
    onTap: _propTypes2["default"].func,

    /**
     * Called when the toggle item is toggled.
     *
     * @type {Function}
     * @param {Object} event
     * @param {String} event.selected - Selected value of item.
     * @param {*} event.value - Value passed from `value` prop.
     * @public
     */
    onToggle: _propTypes2["default"].func,

    /**
     * Applies the provided `icon`.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    selected: _propTypes2["default"].bool,

    /**
     * The value that will be sent to the `onToggle` handler.
     *
     * @type {*}
     * @default null
     * @public
     */
    value: _propTypes2["default"].any
  },
  defaultProps: {
    disabled: false,
    iconPosition: 'before',
    itemIconPosition: 'afterChildren',
    selected: false,
    value: null
  },
  styles: {
    css: _ToggleItemModule["default"],
    className: 'toggleItem',
    publicClassNames: true
  },
  computed: {
    slotBefore: iconCreator('before'),
    slotAfter: iconCreator('after')
  },
  render: function render(_ref2) {
    var Component = _ref2.component,
        componentRef = _ref2.componentRef,
        css = _ref2.css,
        children = _ref2.children,
        selected = _ref2.selected,
        rest = _objectWithoutProperties(_ref2, ["component", "componentRef", "css", "children", "selected"]);

    delete rest.iconComponent;
    delete rest.iconPosition;
    delete rest.itemIcon;
    delete rest.itemIconPosition;
    delete rest.value;
    return /*#__PURE__*/_react["default"].createElement(Component, Object.assign({
      ref: componentRef,
      role: "checkbox"
    }, rest, {
      css: css,
      "aria-checked": selected
    }), children);
  }
});
/**
 * Adds interactive functionality to `ToggleItemBase`.
 *
 * @class ToggleItemDecorator
 * @memberof ui/ToggleItem
 * @mixes ui/ForwardRef.ForwardRef
 * @mixes ui/Touchable.Touchable
 * @mixes ui/Toggleable.Toggleable
 * @hoc
 * @public
 */

exports.ToggleItemBase = ToggleItemBase;
var ToggleItemDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'componentRef'
}), (0, _Toggleable["default"])({
  toggleProp: 'onTap',
  eventProps: ['value']
}), _Touchable["default"]);
/**
 * An unstyled item with built-in support for toggling.
 *
 * Example:
 * ```
 * <ToggleItem icon="lock" iconPosition="before">Toggle Me</ToggleItem>
 * ```
 *
 * @class ToggleItem
 * @memberof ui/ToggleItem
 * @extends ui/ToggleItem.ToggleItemBase
 * @mixes ui/ToggleItem.ToggleItemDecorator
 * @ui
 * @public
 */

exports.ToggleItemDecorator = ToggleItemDecorator;
var ToggleItem = ToggleItemDecorator(ToggleItemBase);
exports.ToggleItem = ToggleItem;
var _default = ToggleItem;
exports["default"] = _default;