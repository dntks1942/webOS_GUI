"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "useToggle", {
  enumerable: true,
  get: function get() {
    return _useToggle.useToggle;
  }
});
exports.Toggleable = exports["default"] = void 0;

var _handle = _interopRequireWildcard(require("@enact/core/handle"));

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _useHandlers = _interopRequireDefault(require("@enact/core/useHandlers"));

var _util = require("@enact/core/util");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _pick = _interopRequireDefault(require("ramda/src/pick"));

var _react = _interopRequireDefault(require("react"));

var _warning = _interopRequireDefault(require("warning"));

var _useToggle = require("./useToggle");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Default config for `Toggleable`.
 *
 * @memberof ui/Toggleable.Toggleable
 * @hocconfig
 */
var defaultConfig = {
  /**
   * Configures the event name that activates the component.
   *
   * **Note**: When using `activate`/`deactivate`, the event payload will only forward the original
   * event and not include toggled `prop` value. Use `toggle` to receive toggled value from the
   * event payload.
   *
   * Example:
   * ```
   * const ToggleItem = Toggleable({activate: 'onFocus', deactivate: 'onBlur'}, Item);
   *
   * handleEvent = (ev) => {
   * 	// do something with `ev.selected` here
   * }
   *
   * <ToggleItem onToggle={handleEvent}>This is a toggle item</Item>
   *
   * @type {String}
   * @memberof ui/Toggleable.Toggleable.defaultConfig
   */
  activate: null,

  /**
   * Configures the event name that deactivates the component.
   *
   * **Note**: When using `activate`/`deactivate`, the event payload will only forward the original
   * event and not include toggled `prop` value. Use `toggle` to receive toggled value from the
   * event payload.
   *
   * Example:
   * ```
   * const ToggleItem = Toggleable({activate: 'onFocus', deactivate: 'onBlur'}, Item);
   *
   * handleEvent = (ev) => {
   * 	// do something with `ev.selected` here
   * }
   *
   * <ToggleItem onToggle={handleEvent}>This is a toggle item</Item>
   * ```
   * @type {String}
   * @memberof ui/Toggleable.Toggleable.defaultConfig
   */
  deactivate: null,

  /**
   * Configures additional props to attach to the event that is sent when toggled.
   *
   * @type {String[]}
   * @default []
   * @memberof ui/Toggleable.Toggleable.defaultConfig
   */
  eventProps: [],

  /**
   * Configures the property that is passed to the wrapped component when toggled.
   *
   * @type {String}
   * @default 'selected'
   * @memberof ui/Toggleable.Toggleable.defaultConfig
   */
  prop: 'selected',

  /**
   * Configures the event name that toggles the component.
   *
   * The payload includes a toggled Boolean value of `prop`.
   *
   * **Note**: The payload will override the original event. If a native event is set, then the native
   * event payload will be lost.
   *
   * @type {String}
   * @default 'onToggle'
   * @memberof ui/Toggleable.Toggleable.defaultConfig
   */
  toggle: 'onToggle',

  /**
   * Allows you to remap the incoming `toggle` callback to an event name of your choosing.
   *
   * For example, run `onToggle` when the wrapped component has an `onClick` property and you've specified
   * `onClick` here.
   *
   * @type {String}
   * @default null
   * @memberof ui/Toggleable.Toggleable.defaultConfig
   */
  toggleProp: null
};
/**
 * A higher-order component that applies a 'toggleable' behavior to its wrapped component.
 *
 * Its default event and property can be configured when applied to a component.
 *
 * Note: This HoC passes a number of props to the wrapped component that should be passed to the
 * main DOM node or consumed by the wrapped component.
 *
 * Example:
 * ```
 * const Item = ({selected, ...rest}) => (<div {...rest}>{selected}</div>);
 * ...
 * const ToggleItem = Toggleable({toggleProp: 'onClick'}, Item);
 * ```
 *
 * @class Toggleable
 * @memberof ui/Toggleable
 * @hoc
 * @public
 */

var ToggleableHOC = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _Toggleable$propTypes;

  var activate = config.activate,
      deactivate = config.deactivate,
      eventProps = config.eventProps,
      prop = config.prop,
      toggle = config.toggle,
      toggleProp = config.toggleProp;
  var defaultPropKey = 'default' + (0, _util.cap)(prop);

  var forwardWithEventProps = function forwardWithEventProps(eventName) {
    return (0, _handle.adaptEvent)(function (ev, props) {
      return _objectSpread(_objectSpread({}, (0, _pick["default"])(eventProps, props)), ev);
    }, (0, _handle.forward)(eventName));
  };

  var forwardActivate = forwardWithEventProps(activate);
  var forwardDeactivate = forwardWithEventProps(deactivate);
  var forwardToggle = forwardWithEventProps(toggle);
  var forwardToggleProp = forwardWithEventProps(toggleProp);
  var toggleHandlers = {
    onToggle: (0, _handle["default"])(function (ev, props, context) {
      return context.toggle();
    }, forwardToggleProp),
    onActivate: (0, _handle["default"])(function (ev, props, context) {
      return context.activate();
    }, forwardActivate),
    onDeactivate: (0, _handle["default"])(function (ev, props, context) {
      return context.deactivate();
    }, forwardDeactivate)
  };

  function Toggleable(props) {
    var updated = _objectSpread({}, props);

    var propSelected = props[prop];
    var hook = (0, _useToggle.useToggle)({
      defaultSelected: props[defaultPropKey],
      disabled: props.disabled,
      onToggle: function onToggle(ev) {
        return forwardToggle(ev, props);
      },
      prop: prop,
      // FIXME: Current behavior for Toggleable treats `null` as undefined so we coerce it
      // here to maintain that behavior while using useControlledState.
      // eslint-disable-next-line no-undefined
      selected: propSelected == null ? undefined : propSelected
    });
    var handlers = (0, _useHandlers["default"])(toggleHandlers, props, hook);
    process.env.NODE_ENV !== "production" ? (0, _warning["default"])(!(prop in props && defaultPropKey in props), "Do not specify both '".concat(prop, "' and '").concat(defaultPropKey, "' for Toggleable instances.\n\t\t\t'").concat(defaultPropKey, "' will be ignored unless '").concat(prop, "' is 'null' or 'undefined'.")) : void 0; // FIXME: Current behavior is to use `false` when switching from a truthy value to
    // either null or undefined. The ternary below enforces that but we don't want to
    // continue this exception in the future and should sunset it with this HOC.

    var _React$useRef = _react["default"].useRef({
      selected: null
    }),
        instance = _React$useRef.current;

    var selected = instance.selected && propSelected == null ? false : hook.selected;
    instance.selected = propSelected;

    if (prop) {
      updated[prop] = selected;
    }

    if (toggleProp || toggle) {
      updated[toggleProp || toggle] = handlers.onToggle;
    }

    if (activate) {
      updated[activate] = handlers.onActivate;
    }

    if (deactivate) {
      updated[deactivate] = handlers.onDeactivate;
    }

    delete updated[defaultPropKey];
    return /*#__PURE__*/_react["default"].createElement(Wrapped, updated);
  }

  Toggleable.propTypes = (_Toggleable$propTypes = {}, _defineProperty(_Toggleable$propTypes, defaultPropKey, _propTypes["default"].bool), _defineProperty(_Toggleable$propTypes, "disabled", _propTypes["default"].bool), _defineProperty(_Toggleable$propTypes, prop, _propTypes["default"].bool), _defineProperty(_Toggleable$propTypes, toggle, _propTypes["default"].func), _Toggleable$propTypes);
  Toggleable.defaultProps = {
    disabled: false
  };
  return Toggleable;
});
exports.Toggleable = ToggleableHOC;
var _default = ToggleableHOC;
exports["default"] = _default;