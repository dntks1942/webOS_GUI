"use strict";

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _locale = require("../../locale");

var _useI18n = _interopRequireDefault(require("../useI18n"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

describe('useI18n', function () {
  // Suite-wide setup
  beforeEach(function () {
    (0, _locale.updateLocale)('en-US');
  });
  afterEach(function () {
    (0, _locale.updateLocale)();
  }); // eslint-disable-next-line enact/prop-types

  function Component(_ref) {
    var locale = _ref.locale,
        latinLanguageOverrides = _ref.latinLanguageOverrides,
        nonLatinLanguageOverrides = _ref.nonLatinLanguageOverrides;

    var _React$useState = _react["default"].useState({
      rtl: false,
      className: null
    }),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        state = _React$useState2[0],
        setState = _React$useState2[1];

    var i18n = (0, _useI18n["default"])({
      latinLanguageOverrides: latinLanguageOverrides,
      locale: locale,
      nonLatinLanguageOverrides: nonLatinLanguageOverrides,
      onLoadResources: setState
    });
    return /*#__PURE__*/_react["default"].createElement("div", Object.assign({}, state, i18n));
  }

  test('should return rtl=false by default', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    var expected = false;
    var actual = subject.prop('rtl');
    expect(actual).toBe(expected);
  });
  test('should return en-US classes', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    subject.update();
    var expected = ['enact-locale-en', 'enact-locale-en-US', 'enact-locale-US'].sort();
    var actual = subject.prop('className').split(' ').sort();
    expect(actual).toEqual(expected);
  });
  test('should return rtl=true for RTL locales', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      locale: "ar-SA"
    }));
    var expected = true;
    var actual = subject.prop('rtl');
    expect(actual).toBe(expected);
  });
  test('should return ar-SA classes', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      locale: "ar-SA"
    }));
    var expected = ['enact-locale-ar', 'enact-locale-ar-SA', 'enact-locale-SA', 'enact-locale-non-italic', 'enact-locale-non-latin', 'enact-locale-right-to-left'].sort();
    var actual = subject.prop('className').split(' ').sort();
    expect(actual).toEqual(expected);
  });
  test('should return support overriding to latin locale', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      locale: "ar-SA",
      latinLanguageOverrides: ['ar-SA']
    }));
    var expected = ['enact-locale-ar', 'enact-locale-ar-SA', 'enact-locale-SA', 'enact-locale-non-italic', 'enact-locale-right-to-left'].sort();
    var actual = subject.prop('className').split(' ').sort();
    expect(actual).toEqual(expected);
  });
  test('should return support overriding to non-latin locale', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, {
      locale: "en-US",
      nonLatinLanguageOverrides: ['en-US']
    }));
    var expected = ['enact-locale-en', 'enact-locale-en-US', 'enact-locale-US', 'enact-locale-non-latin'].sort();
    var actual = subject.prop('className').split(' ').sort();
    expect(actual).toEqual(expected);
  });
});