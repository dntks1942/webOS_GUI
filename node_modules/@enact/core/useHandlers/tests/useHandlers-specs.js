"use strict";

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _useHandlers = _interopRequireDefault(require("../useHandlers"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable enact/prop-types */
describe('useHandlers', function () {
  var context = {
    value: 1
  };

  function Component(props) {
    var handlers = (0, _useHandlers["default"])({
      testEvent: function testEvent(ev, p, c) {
        return ev(p, c);
      }
    }, props, context);
    return /*#__PURE__*/_react["default"].createElement("div", Object.assign({}, props, handlers));
  } // Sanity test for Component moreso than useHandlers test


  test('should include handlers in props', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    var expected = 'testEvent';
    var actual = subject.props();
    expect(actual).toHaveProperty(expected);
  });
  test('should have the same reference across renders', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    var expected = subject.prop('testEvent');
    subject.setProps({});
    var actual = subject.prop('testEvent');
    expect(actual).toBe(expected);
  });
  test('should receive the event', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    var props = {
      children: 'updated'
    };
    subject.setProps(props);
    subject.find('div').invoke('testEvent')(spy);
    expect(spy).toHaveBeenCalled();
  });
  test('should reflect the latest props', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    var props = {
      children: 'updated'
    };
    subject.setProps(props);
    subject.find('div').invoke('testEvent')(spy);
    var expected = props;
    var actual = spy.mock.calls[0][0];
    expect(actual).toMatchObject(expected);
  });
  test('should support component-driven context', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    subject.find('div').invoke('testEvent')(spy); // defined a "global" context to ease testability but this isn't representative of the
    // expected use case of this feature.

    var expected = context;
    var actual = spy.mock.calls[0][1];
    expect(actual).toMatchObject(expected);
  });
  test('should return the value from the handler', function () {
    var spy = jest.fn().mockImplementation(function () {
      return 'ok';
    });
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/_react["default"].createElement(Component, null));
    var returnValue = subject.find('div').invoke('testEvent')(spy); // defined a "global" context to ease testability but this isn't representative of the
    // expected use case of this feature.

    var expected = 'ok';
    var actual = returnValue;
    expect(actual).toBe(expected);
  });
});